<?xml version="1.0" encoding="utf-8"?><bwFrame xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" default_layout="pxnsnfns11111001110" textdirection="ltr" device="false" kbshortcuts="true" outputtype="ap"><layouts><layout name="pxnsnfns11111001110" font="Articulate" controllayout="pxnsnfns11111001110" colorscheme="pxnsnfns11111001110" string_table="pxnsnfns11111001110" /></layouts><control_options><optiongroups><optiongroup name="sidebaroptions"><options><option name="title_enabled" value="true"><options><option name="title_text" value="Hardware Design Flow for an ARM-based System on Chip" /></options></option><option name="logo_enabled" value="true"><options><option name="logo_url" value="presentation_content/logo.swf"><properties><property name="width" value="180" /><property name="height" value="76" /></properties></option></options></option><option name="sidebar_enabled" value="true"><options><option name="sidebarpos" value="left" /></options></option><optionlist name="tabs"><listitems><listitem name="resources" value="false" group="linkright" /><listitem name="customlink" value="true" group="linkright"><properties><property name="title" value="Exit" /><property name="data" value="6877CprOBpm" /><property name="ignoreSlideLock" value="true" /></properties></listitem><listitem name="outline" value="true" group="sidebar" /><listitem name="glossary" value="false" group="sidebar" /><listitem name="transcript" value="true" group="sidebar" /></listitems></optionlist><option name="time_enabled" value="false"><options><option name="time_format" value="totalelapsed" /></options></option><option name="info_enabled" value="false"><options><option name="default" value="default" /></options></option><option name="video_enabled" value="false"><options><option name="height" value="135" /></options></option></options></optiongroup><optiongroup name="menuoptions"><options><option name="flow" value="free" /><option name="wraplistitems" value="true" /><option name="tooltips" value="true" /><option name="autocollapse" value="false" /><option name="autonumber" value="true" /><option name="levelbehavior" value="reached" /><option name="levelrestriction" value="unrestricted" /><option name="enableresultsicons" value="false" /></options></optiongroup><optiongroup name="controls"><options><option name="volume" value="true" /><option name="seekbar" value="true"><options><option name="readonly" value="false" /></options></option><option name="search" value="true" /><option name="replay" value="true" /><option name="pauseplay" value="true" /><option name="enableKeyboardShortcuts" value="true" /><option name="elapsedandtotaltime" value="true" /><option name="use_fixed_output_size" value="true" /><option name="output_size_scale_percent" value="100" /></options></optiongroup><optiongroup name="bottombaroptions"><options><option name="bottombar_enabled" value="true" /></options></optiongroup></optiongroups></control_options><control_layouts><control_layout name="pxnsnfns11111001110"><control name="volume" enabled="true" /><control name="seekbar" enabled="true" /><control name="replay" enabled="true" /><control name="pauseplay" enabled="true" /><control name="logo" enabled="true" /><control name="previous" enabled="true" /><control name="next" enabled="true" /><control name="submit" enabled="false" /><control name="finish" enabled="false" /><control name="submitall" enabled="false" /><control name="resources" enabled="false" /><control name="glossary" enabled="false" /><control name="transcript" enabled="true" /><control name="outline" enabled="true"><controls><control name="search" enabled="true" /></controls></control><control name="close_btn" enabled="false" /></control_layout></control_layouts><colorschemes><colorscheme name="pxnsnfns11111001110"><color_group name="infopanel"><group_colors><color name="link_text"><fill type="linear" rotation="90"><colors><color rgb="0x7C2280" alpha="100" stop="0" /></colors></fill></color><color name="link_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="name_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="title_text"><fill type="linear" rotation="90"><colors><color rgb="0x999999" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="infopanelpopup"><group_colors><color name="link_text"><fill type="linear" rotation="90"><colors><color rgb="0x7C2280" alpha="100" stop="0" /></colors></fill></color><color name="link_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="name_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="bio_text"><fill type="linear" rotation="90"><colors><color rgb="0x999999" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="timer"><group_colors><color name="duration"><fill type="linear" rotation="90"><colors><color rgb="0x00D7FF" alpha="100" stop="0" /><color rgb="0x00ABFF" alpha="100" stop="255" /></colors></fill></color><color name="elapsed"><fill type="linear" rotation="90"><colors><color rgb="0xFEE347" alpha="100" stop="0" /><color rgb="0xFCCC2A" alpha="100" stop="255" /></colors></fill></color><color name="stroke"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /></colors></fill></color><color name="inner"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="window"><group_colors><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="inner"><fill type="linear" rotation="90"><colors><color rgb="0xEAEAEA" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xF7F7F7" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xD3D3D3" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0x000000" alpha="20" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="editor"><group_colors><color name="slide_text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="html_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="btn_bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="btn_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /><color rgb="0xAFAFAF" alpha="100" stop="255" /></colors></fill></color><color name="btn_down"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /><color rgb="0xF4F4F4" alpha="100" stop="255" /></colors></fill></color><color name="btn_border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="btn_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_text_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="listitem"><group_colors><color name="selected_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="lines"><fill type="linear" rotation="90"><colors><color rgb="0xDFDFDF" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0xE6E6E6" alpha="100" stop="0" /></colors></fill></color><color name="viewed"><fill type="linear" rotation="90"><colors><color rgb="0x909090" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0xC0E2F1" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="base"><group_colors><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xD3D3D3" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xF7F7F7" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xF3F3F3" alpha="100" stop="255" /></colors></fill></color><color name="menu_shade"><fill type="linear" rotation="90"><colors><color rgb="0xDBDBDB" alpha="100" stop="0" /><color rgb="0xC3C3C3" alpha="100" stop="255" /></colors></fill></color><color name="slide_bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color></group_colors></color_group><color_group name="button"><group_colors><color name="btn_bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="btn_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /><color rgb="0xAFAFAF" alpha="100" stop="255" /></colors></fill></color><color name="btn_down"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /><color rgb="0xF4F4F4" alpha="100" stop="255" /></colors></fill></color><color name="btn_border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="btn_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_text_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_color"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_glow"><fill type="linear" rotation="90"><colors><color rgb="0xCFCFCF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="checkbox"><group_colors><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="check"><fill type="linear" rotation="90"><colors><color rgb="0x33CC00" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0x6BF8FF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="logo"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="menu"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="scrollarea"><group_colors><color name="bg"><fill type="linear" rotation="0"><colors><color rgb="0xDEDEDE" alpha="100" stop="0" /><color rgb="0xE8E8E8" alpha="100" stop="128" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xF6F6F6" alpha="100" stop="0" /><color rgb="0xF3F3F3" alpha="100" stop="255" /></colors></fill></color><color name="button_bg"><fill type="linear" rotation="90"><colors><color rgb="0xC4C4C4" alpha="100" stop="0" /><color rgb="0xB2B2B2" alpha="100" stop="255" /></colors></fill></color><color name="button_inner"><fill type="linear" rotation="90"><colors><color rgb="0xCBCBCB" alpha="100" stop="0" /><color rgb="0xBABABA" alpha="100" stop="255" /></colors></fill></color><color name="button_border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="icons"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xD9D9D9" alpha="100" stop="0" /></colors></fill></color><color name="detaila"><fill type="linear" rotation="90"><colors><color rgb="0xA7A7A7" alpha="100" stop="0" /></colors></fill></color><color name="detailb"><fill type="linear" rotation="90"><colors><color rgb="0xCFCFCF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="searchinput"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xDFDFDF" alpha="100" stop="0" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xADADAD" alpha="100" stop="0" /><color rgb="0xFAFAFA" alpha="100" stop="255" /></colors></fill></color><color name="icon"><fill type="linear" rotation="90"><colors><color rgb="0x8A8A8A" alpha="100" stop="0" /></colors></fill></color><color name="button_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="hover_glow"><fill type="linear" rotation="90"><colors><color rgb="0x6BF8FF" alpha="100" stop="0" /></colors></fill></color><color name="search_text"><fill type="linear" rotation="90"><colors><color rgb="0x8A8A8A" alpha="100" stop="0" /></colors></fill></color><color name="bg_active"><fill type="linear" rotation="90"><colors><color rgb="0xFAFAFA" alpha="100" stop="0" /></colors></fill></color><color name="text_active"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="seekcontrol"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="seek_border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /><color rgb="0xEEEEEE" alpha="100" stop="255" /></colors></fill></color><color name="seek_bg"><fill type="linear" rotation="90"><colors><color rgb="0xE7E7E7" alpha="100" stop="0" /></colors></fill></color><color name="seek_position"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_color"><fill type="linear" rotation="90"><colors><color rgb="0x2D2D2D" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_hover"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="tabs"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="transcript"><group_colors><color name="div"><fill type="linear" rotation="90"><colors><color rgb="0xE1E1E1" alpha="100" stop="0" /></colors></fill></color><color name="heading_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="outline"><group_colors><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xC6C6C6" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xF9F9F9" alpha="100" stop="0" /></colors></fill></color><color name="divc"><fill type="linear" rotation="90"><colors><color rgb="0xE1E1E1" alpha="100" stop="0" /></colors></fill></color><color name="search_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="search_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="resource"><group_colors><color name="separator"><fill type="linear" rotation="90"><colors><color rgb="0xE0E0E0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="glossary"><group_colors><color name="selected_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0xC0E2F1" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0xE6E6E6" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xE2E2E2" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xE2E2E2" alpha="100" stop="0" /></colors></fill></color><color name="divc"><fill type="linear" rotation="90"><colors><color rgb="0xFAFAFA" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE7E7E7" alpha="100" stop="0" /></colors></fill></color><color name="heading_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="volume"><group_colors><color name="thumb_border"><fill type="linear" rotation="90"><colors><color rgb="0xA5A5A5" alpha="100" stop="0" /></colors></fill></color><color name="thumb_inner"><fill type="linear" rotation="90"><colors><color rgb="0xD4D4D4" alpha="100" stop="0" /></colors></fill></color><color name="thumb_bg"><fill type="linear" rotation="90"><colors><color rgb="0xC8C8C8" alpha="100" stop="0" /></colors></fill></color><color name="slider_border"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /></colors></fill></color><color name="slider_bg"><fill type="linear" rotation="90"><colors><color rgb="0xBCBCBC" alpha="100" stop="0" /><color rgb="0xBCBCBC" alpha="100" stop="128" /><color rgb="0xC3C3C3" alpha="100" stop="255" /></colors></fill></color></group_colors></color_group><color_group name="HTML"><group_colors><color name="htmlpage_bg_color"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group></colorscheme></colorschemes><string_tables><string_table name="pxnsnfns11111001110"><string id="prev">PREV</string><string id="next">NEXT</string><string id="submit">SUBMIT</string><string id="outline">Menu</string><string id="resources">Resources</string><string id="glossary">Glossary</string><string id="transcript">Notes</string><string id="clear">Clear and return to Menu</string><string id="search_results">Search Results</string><string id="filter">Filter</string><string id="slide_text_chk">Slide Text</string><string id="transcript_chk">Notes</string><string id="search_in">Search in:</string><string id="check_include">Check to include</string><string id="search">Search...</string><string id="terms">Terms</string><string id="definition">Definition</string><string id="finish">FINISH</string><string id="acc_finish">finish</string><string id="acc_definition">definition</string><string id="acc_resources">resources</string><string id="acc_search_input">search</string><string id="acc_pause">pause</string><string id="acc_play">play</string><string id="acc_replay">replay</string><string id="acc_submit">submit</string><string id="acc_next">next</string><string id="acc_previous">previous</string><string id="acc_volume">volume</string><string id="submitall">SUBMIT ALL</string><string id="acc_submitall">submit all</string><string id="question_list">Question List</string><string id="more_info">More info</string><string id="send_an_email">Send an email</string><string id="close">Close</string><string id="bio">Bio</string><string id="exit">Exit</string></string_table></string_tables><sounds enabled="false" /><nav_data><outline><links><slidelink slideid="4umoxjgClbn.64eNrQIRQYZ" displaytext="Hardware Design Flow for ARM-based System on Chip" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5qqlrXbsaN5" displaytext="SoC Overview" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.5XnPKPKiY9t" displaytext="Hardware Development Perspective" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.63kmBaFei5B" displaytext="System Development Flow" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.67WKLdka9jg" displaytext="SoC System Architecture" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6eQLpGwLEHM" displaytext="HPS IP Features" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6ZWPc1BrerQ" displaytext="SoC Design Methodology Goals" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.6mUHWr3kqbh" displaytext="Quartus and Qsys Tool Flow" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.6UDirCGOvCw" displaytext="SoC Design Flow" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5uslVs7K792" displaytext="Create Quartus Project for a SoC Device" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5g37SvC263m" displaytext="Qsys System Integration Tool" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6Hp8XwtefCU" displaytext="Start a New System in Qsys" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6exKVAIdTrP" displaytext="Add Components to Qsys System" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6Sik0F7Nh3G" displaytext="Connect the Components" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5z51lgwfk9X" displaytext="HPS Component Instantiation" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5uWWPVoEOTR" displaytext="HPS FPGA Interface Options" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6PnvEKJZJAB" displaytext="Peripheral Pins Options" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6GxGtFT2T2S" displaytext="HPS Clocks" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6KpVk0zpeSd" displaytext="Cyclone V / Arria V SDRAM Configuration" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6WlSEmuBCRe" displaytext="Arria 10 SDRAM Parameterization" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6cCf2og9Uaq" displaytext="Generate Completed System" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6pYZQbuFae7" displaytext="Hardware/Software Handoff Files" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.6EDmfkAhHh7" displaytext="Custom Components" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.6OZ0986mzos" displaytext="Qsys-Supported Standard Interfaces" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.61lXGHm6UJ8" displaytext="Avalon or AXI" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5y63ZTjvGJQ" displaytext="Add Custom Components to Qsys" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5uKWOUGaLeX" displaytext="Visualization of FPGA Peripherals – FPGA Adaptive" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.61h9iS5mRcy" displaytext="Simulation" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.6l5FleyxLro" displaytext="HPS Simulation Support" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6IFqMoW4cAP" displaytext="Simulation Flow" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5aEjQSguPmT" displaytext="Component Testing" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6ZXZczTsYYk" displaytext="HPS System Testing" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5zFs9hVQKEY" displaytext="HPS Simulation Support - Interfaces" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6L0rXzGSGtW" displaytext="Generate Testbench Qsys System" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6O0m4J9yb1K" displaytext="Testbench Example" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6FqO3kkpMlB" displaytext="Run Simulation Script" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6bzDtrnUfWf" displaytext="Learn More" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.6dbilQTbrxN" displaytext="On Chip Component Debug" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.5n81UwibHxR" displaytext="What is the System Console?" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6QMwv3F1EPb" displaytext="System Console Components and Interfaces" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6W805rIfZ7Z" displaytext="System Console GUI Launch" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6KER4q32jsK" displaytext="System Console GUI" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.65oApOJgFDZ" displaytext="System Console Services" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5lYpQPudzRc" displaytext="Service Types" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6PxQEOsOY0d" displaytext="Usage Flow – Summary" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.67QEv0Kg9AX" displaytext="Dashboards" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.6JVnelRrtIs" displaytext="FPGA Adaptive Software Debug" expand="false" type="slide"><links><slidelink slideid="4umoxjgClbn.5tbflTnA2C3" displaytext="FPGA-Adaptive Debugging" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6Vo9ThcNdTu" displaytext="ARM DS-5 Debugger" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6Iq3OG5pmz2" displaytext="Debug Perspective – Registers View" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6CUAV8n6spX" displaytext="Altera SoC Debug Architecture" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6FiLzrK5U2s" displaytext="Export Cross Trigger Interface to Custom Hardware" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6aLQRC99E0a" displaytext="SignalTap II Configuration for Cross Trigger" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6XgsmWWCXL6" displaytext="Run Debugger and SignalTap II Logic Analyzer" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5bubpfKHLbA" displaytext="Viewing Non-Intrusive Events" expand="false" type="slide" /></links></slidelink><slidelink slideid="4umoxjgClbn.5bQfgnLr31F" displaytext="SoC Design Flow Review" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.5XVKEMi2JhJ" displaytext="Follow-on Training" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6frAklP3y6Z" displaytext="Give us your feedback" expand="false" type="slide" /><slidelink slideid="4umoxjgClbn.6gOgcqWqcp1" displaytext="Thank You" expand="false" type="slide" /></links></outline><search><slidetext slideid="4umoxjgClbn.64eNrQIRQYZ" slidebank="false" type="slide"> hardware design flow for arm-based system on chip</slidetext><slidetext slideid="4umoxjgClbn.5qqlrXbsaN5" slidebank="false" type="slide"> agenda 2 system on chip (soc) overviewhardware design flowquartus® prime software and qsys tool flowhard processor system (hps) component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.5XnPKPKiY9t" slidebank="false" type="slide"> hardware development perspective 3 silicon propertiessoft iplowest level sw accesses fpgaengineer   silicon device ip cores registers hardware libs driver bsp os middleware application</slidetext><slidetext slideid="4umoxjgClbn.63kmBaFei5B" slidebank="false" type="slide">     system development flow fpga design flow software design flow hardwaredevelopment softwaredevelopment release release  quartus programmer in-system update  flash programmer release release  quartus programmer in-system update  flash programmer  simulate ,modelsim®, vcs, etc. axi™ and avalon ® bus&#xB;  functional models (bfms)   debug debug  signaltap ™ii logic analyzer system console  gnu, lauterbach, ds-5&#xB;  and arm® ecosystem    quartus design software qsys system integration tool standard rtl flow altera® and partner ip  arm development studio 5 gnu toolchain os/bsp: linux, vxworks hardware libraries design examples design design   hw/sw handoff    simulate  virtual platforms </slidetext><slidetext slideid="4umoxjgClbn.67WKLdka9jg" slidebank="false" type="slide"> soc system architecture 5 processordual-core arm® cortex™-a9 mpcore™ processorneon™ coprocessor double-precision fpu512-kb shared l2 cachearmv7-afpga features8 input adaptive logic modules (alm)variable precision dsp blockshard floating-point on arria® 10 socsm10k/m20k + mlab memory blocksfpllshard ip for pci express®high-bandwidth on-chip interfaces  pcie multiport ddr sdram controller multiport ddr sdram controller hard processor system (hps) arm cortex-a9neon / fpul1 cache l2 cache usb otg      (x2) 64-kbram dma(8 channels)              fpga shared multiport ddr sdram controller  jtag debug / trace (1)  arm cortex-a9neon / fpul1 cache sd / sdio/ mmc  i2c(x4) can(x2) gpio spi(x2) hard pcie® timers(x6) hps tofpga fpgato hps   fpgaconfig   uart(x2) ethernet(x2) qspi flash control  nandflash  hard multiport ddr sdram controller (2)   3-, 5-, 6-, &#xB;and 10-gbps transceivers   28lp process 8-input alms variable-precision dsp m10k memory and 640-bit mlabs fplls hps  i/os fpga general purpose  i/os   </slidetext><slidetext slideid="4umoxjgClbn.6eQLpGwLEHM" slidebank="false" type="slide"> hps ip features 6 multi-processor unit (mpu) subsystem featuring dual arm cortex-a9 mpcore™ processorsdram controller subsystem/interconnect*general purpose direct memory access (dma) controller2 or 3* ethernet media access controllers (emacs)nand, quad spi, sd/mmc) flash controllers2 usb 2.0 on-the-go (otg) controllers2 serial peripheral interface (spi) master controllers2 spi slave controllers4 or 5* inter-integrated circuit (i2c) controllers2 controller area network (can) controllers**2 uarts3 gpio interfaces **cyclone® v socs only *arria® 10 socs only</slidetext><slidetext slideid="4umoxjgClbn.6ZWPc1BrerQ" slidebank="false" type="slide"> soc design methodology goals 7 fpga:looks like an fpgaworks like an fpgastandard fpga development flowstandard fpga development toolsquartus sw, qsys, signaltap™ ii logic analyser, system console, usb-blaster™ programmer...arm hps:looks like an arm processor systemworks like an arm processor systemtypical arm processor development flowtypical arm processor development toolsarm cortex-a9 compiler/debugger, jtag tools, program trace...</slidetext><slidetext slideid="4umoxjgClbn.6mUHWr3kqbh" slidebank="false" type="slide"> agenda 8 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.6UDirCGOvCw" slidebank="false" type="slide"> qsys flow soc design flow 9 create quartus project(with  soc device) create qsys system   add, configure, and connect components includinghps, custom ip, and other off-the-shelf ip  generate qsys system instantiate qsys system in quartus project  run analysis &amp; elaboration  create i/o assignments(ddr,hps bank vcc)  compile quartus project  sw handoff hw verification  perform functional simulation  </slidetext><slidetext slideid="4umoxjgClbn.5uslVs7K792" slidebank="false" type="slide"> create quartus project for a soc device 10 choose an soc device as the targetcyclone v se/sx/st,  arria v sx/st, or arria 10 sx families  </slidetext><slidetext slideid="4umoxjgClbn.5g37SvC263m" slidebank="false" type="slide"> qsys system integration tool 11 gui based system integration tool for system designsimplifies complex system developmentautomatically generates the interconnect among various off-the-shelf and custom ipsprovides a standard platform: ip integrationcustom ip authoringip verificationenables design re-use </slidetext><slidetext slideid="4umoxjgClbn.6Hp8XwtefCU" slidebank="false" type="slide"> start a new system in qsys 12 start qsys tools from the quartus projecttools menu, tasks pane, or toolbar </slidetext><slidetext slideid="4umoxjgClbn.6exKVAIdTrP" slidebank="false" type="slide"> add components to qsys system 13 all ip including hps, off-the-shelf ip, and custom components located in the ip catalog pane of  the qsys toolsuse search feature to easily find ipdouble click or click add to instantiate the component </slidetext><slidetext slideid="4umoxjgClbn.6Sik0F7Nh3G" slidebank="false" type="slide"> connect the components 14 click the appropriate dots in the connections columnalternatively right click on a specific interface to see and make connections  </slidetext><slidetext slideid="4umoxjgClbn.5z51lgwfk9X" slidebank="false" type="slide"> agenda 15 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.5uWWPVoEOTR" slidebank="false" type="slide"> hps fpga interface options 16 general interfaces to the hpseventsgpiosboot signalsdebug signalsaxi bridges to/from the fpgasdram interface from fpgaresets to/from the fpgadma peripheral request from fpgainterrupts to/from the fpga        </slidetext><slidetext slideid="4umoxjgClbn.6PnvEKJZJAB" slidebank="false" type="slide"> peripheral pins options 17 enable peripheral interfaces and choose modesselect i/o setmore peripherals than available i/osset gpiosset loaner iosallow fpgas to utilize hps pins  </slidetext><slidetext slideid="4umoxjgClbn.6GxGtFT2T2S" slidebank="false" type="slide"> hps clocks 18 specify input clock frequenciesdrive fpga clocks into hpsperipheralssdramspecify clock mux optionsenable hps clocks into the fpgaspecify peripheral clock frequencies  </slidetext><slidetext slideid="4umoxjgClbn.6KpVk0zpeSd" slidebank="false" type="slide"> cyclone v / arria v sdram configuration 19 consistent with altera sdram controller configuration guisupported memories:ddr3ddr2lpddr2configure &#xB;clock &amp; initial &#xB;settings </slidetext><slidetext slideid="4umoxjgClbn.6WlSEmuBCRe" slidebank="false" type="slide"> arria 10 sdram parameterization 20 must use “arria 10 external memory interface for hps”separate qsys component to be connected to the hps  </slidetext><slidetext slideid="4umoxjgClbn.6cCf2og9Uaq" slidebank="false" type="slide"> generate completed system 21 creates the qsys interconnectgenerates source files for synthesis and/or simulationcreates software handoff files      </slidetext><slidetext slideid="4umoxjgClbn.6pYZQbuFae7" slidebank="false" type="slide"> hardware/software handoff files 22 software flow soc_system.h hardware flow .sopcinfo .svd handoff    device treegenerator ds-5 debugger second stage bootloader generator second stage bootloader      hw design  .sof  altera prime design software device tree .sopcinfo .svd handoff    device treegenerator ds-5 debugger second stage bootloader generator second stage bootloader      hw design  .sof  altera prime design software device tree   system header file generation   qsys system info, component info,  sdram calibration files, &#xB;id / timestamp, hps iocsr data </slidetext><slidetext slideid="4umoxjgClbn.6EDmfkAhHh7" slidebank="false" type="slide"> agenda 23 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.6OZ0986mzos" slidebank="false" type="slide"> qsys-supported standard interfaces 24 components conforming to standard interface can be integrated using qsysensures compatibilitysimply design entryeasy to functionally verifysupported standard interfacesavalon-mm (memory mapped)master interface makes read and write requests to slave interfaceavalon-st (streaming)source interface sends data to sink interface (point-to-point)arm axi 3.0 &amp; 4.0 hps is axi 3.0 compliantarm apb™ arm ahb™</slidetext><slidetext slideid="4umoxjgClbn.61lXGHm6UJ8" slidebank="false" type="slide"> avalon or axi 25 avalonsimple to implementspecification from alterause cases, waveforms, etc.axicomplexmany advanced featurestuned for throughputaxi specificationqsys supports bothcommunication across interfaces automatically handled  </slidetext><slidetext slideid="4umoxjgClbn.5y63ZTjvGJQ" slidebank="false" type="slide"> add custom components to qsys 26 use component editoradd hdl files related to the componentmap hdl ports to standard interface types and signalsspecify interface properties </slidetext><slidetext slideid="4umoxjgClbn.5uKWOUGaLeX" slidebank="false" type="slide"> visualization of fpga peripherals – fpga adaptive 27 register views assist the debug of fpga peripheralsfile generated by fpga tool flowimport into ds-5 debuggerdebug views to debug&#xB;software driversself-documentinggrouped by peripheral, &#xB;register and bit-fieldcmsis-svd filexml file provide peripheral infocreate for custom componentsavailable for altera ip  cmsis (.svd file) peripheral register descriptions  </slidetext><slidetext slideid="4umoxjgClbn.61h9iS5mRcy" slidebank="false" type="slide"> agenda 28 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.6l5FleyxLro" slidebank="false" type="slide"> hps simulation support 29 axi bus functional models (bfms) of hps to fpga interfaces providedmentor® verification ip altera® edition implemented in systemverilogvhdl hooks also availabletest if an axi interface meets the protocol specificationstests functionality of the interfaceavalon bfm available for testing of avalon componentsallows rapid verification of your fpga ipinstantiate separate models for each interfacesimulates interface protocolvalidate custom ip access the bfms through the application programming interface (api)</slidetext><slidetext slideid="4umoxjgClbn.6IFqMoW4cAP" slidebank="false" type="slide"> simulation flow 30 create hps system in qsyscan also simulate individual avalon/axi components standalonegenerate simulation model or testbench systemwrite top level test programbuild and run simulation script</slidetext><slidetext slideid="4umoxjgClbn.5aEjQSguPmT" slidebank="false" type="slide"> component testing 31 generate qsys system with rtl (dut) interfaces exportedmaster bfm generates transactionsslave bfm generates responsesmonitor bfm watches traffic and does checking    rtl slave user test program monitor bfm     master bfm clock bfm reset bfm   generated by qsys  manually added  rtl master slave bfm</slidetext><slidetext slideid="4umoxjgClbn.6ZXZczTsYYk" slidebank="false" type="slide"> hps system testing 32 completed hps system in qsys  user test program qsyssystem clock bfm reset bfm   generated by qsys      conduit bfms </slidetext><slidetext slideid="4umoxjgClbn.5zFs9hVQKEY" slidebank="false" type="slide"> hps simulation support - interfaces 33 each interface will be supported by an interface bfmclock input interfaces will be connected to the appropriate bfmclock output interfaces will be driven by clock master bfmspin-side interfaces will be unconnected within the hps simulation model. </slidetext><slidetext slideid="4umoxjgClbn.6L0rXzGSGtW" slidebank="false" type="slide"> generate testbench qsys system 34 create simulation modelgenerates a model of the systemneed to create separate custom testbenchtestbench systemstandardfor component testingsimplefor system testing    generate testbench system… generate hdl…</slidetext><slidetext slideid="4umoxjgClbn.6O0m4J9yb1K" slidebank="false" type="slide">  35 testbench example  import axi bfm package instantiate qsys testbench system  setup values for master transaction  send transaction wait for transaction setup response send response    </slidetext><slidetext slideid="4umoxjgClbn.6FqO3kkpMlB" slidebank="false" type="slide"> run simulation script 36 scripts for major simulation vendors created automaticallysets up simulation variablescreates and compiles device libraries and source filessimulates the design</slidetext><slidetext slideid="4umoxjgClbn.6bzDtrnUfWf" slidebank="false" type="slide"> learn more 37 mentor verification ip altera edition user guideavalon verification ip user guidequartus handbook, qsys chaptercyclone v or arria v handbooksinstruction led trainingsintroduction to the qsys system integration tooladvanced qsys system integration methodologiesonline trainingsintroduction to qsysadvanced system design using qsysqsys custom componentsavalon verification suite</slidetext><slidetext slideid="4umoxjgClbn.6dbilQTbrxN" slidebank="false" type="slide"> agenda 38 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.5n81UwibHxR" slidebank="false" type="slide"> what is the system console? 39 quick system-level debug of qsys systemsinteractive tcl consoledebug over various communication channelsjtag, usb, or tcp/ipread from or write to memory mapped componentsno processor required </slidetext><slidetext slideid="4umoxjgClbn.6QMwv3F1EPb" slidebank="false" type="slide"> 40 system console components and interfaces qsysinterconnect user component system console jtag uart jtag to avalon master bridge  nios ii processor mm slave avalon-mmmaster avalon-mm master avalon-mm slave through jtag and virtual jtag hub          usb debugmaster avalon-mm master   usb  </slidetext><slidetext slideid="4umoxjgClbn.6W805rIfZ7Z" slidebank="false" type="slide">  system console gui launch 41  from qsys guitools menu from nios ii or embedded command shell type:              system-console   </slidetext><slidetext slideid="4umoxjgClbn.6KER4q32jsK" slidebank="false" type="slide"> system console gui 42 </slidetext><slidetext slideid="4umoxjgClbn.65oApOJgFDZ" slidebank="false" type="slide"> system console services 43 collection of functions available to accomplish certain types of tasksaccessed through a service instance which may be associated with a particular componentmost service instances automatically discovered when system console startsrun get_service_types will return all the service types</slidetext><slidetext slideid="4umoxjgClbn.5lYpQPudzRc" slidebank="false" type="slide"> service types 44 jtag_debugjtag chain debug qsys system clock and reset debugdeviceoffers sof download and jtag node name mappingbytestreamaccess ”character” devices, i.e. jtag_uartmasterprovides control of a master portallows reading or writing to any connected slave devicemonitorefficiently read many memory mapped slave memory locations at regular intervalsdashboardcreate graphical tools that integrate into the system consoleuse widgets such as buttons, dials, and charts</slidetext><slidetext slideid="4umoxjgClbn.6PxQEOsOY0d" slidebank="false" type="slide"> usage flow – summary 45      3. launch system console 5. perform desired operation(s) with the service 2. connect board and program fpga 4. locate and claim service path 1. add required component to qsys 6. close the service    complete master write and read example script set mpath [lindex \    [get_service_paths master] 0]set claim_path \ [claim_service master $mpath “”]&#xB;master_write_memory $claim_path \ 0x2000 [list 0x01 0x02]master_read_memory $claim_path \ 0x2000 2close_service master $claim_path</slidetext><slidetext slideid="4umoxjgClbn.67QEv0Kg9AX" slidebank="false" type="slide"> dashboards 46 create widgets in system console guicustomize the dashboard using tcl commandsinteract with live instances of an ip corerefer to the “system console” online training or “advanced qsys system integration tool methodologies" instructor led training </slidetext><slidetext slideid="4umoxjgClbn.6JVnelRrtIs" slidebank="false" type="slide"> agenda 47 system on chip (soc) overviewhardware design flowquartus prime software and qsys tool flowhps component instantiationcustom componentssoc hardware system debugsimulationon-chip component debugfpga-adaptive software debug</slidetext><slidetext slideid="4umoxjgClbn.5tbflTnA2C3" slidebank="false" type="slide"> fpga-adaptive debugging 48 synchronization of debug actions on the hps with fpga activity including signaltap ii triggersuses arm coresight™ compatible ip in the hpsfeatures providedability to debug hps execution with usb-blaster™ cable view / change hps and fpga status and control registers from the arm ds5 debuggerfpga to hps cross triggerhardware signal or signaltap ii logic analyzer trigger out, breaks hps executionhps to fpga cross triggerbreaking code execution in the hps cores acts as an input trigger for the signaltap ii logic analyzer or other hw signalcorrelating hardware events with the hps trace stream without breaking processor execution</slidetext><slidetext slideid="4umoxjgClbn.6Vo9ThcNdTu" slidebank="false" type="slide">  49 arm ds-5 debugger   projects terminal window file viewer outline view(view functions, enums, classes, structs etc.) select perspective</slidetext><slidetext slideid="4umoxjgClbn.6Iq3OG5pmz2" slidebank="false" type="slide"> debug perspective – registers view 50  </slidetext><slidetext slideid="4umoxjgClbn.6CUAV8n6spX" slidebank="false" type="slide">  altera soc debug architecture cross-triggers between&#xB;fpga(8) and cpus (8)   28 hw signal events injected into trace stream export trace &#xB;to trace port,&#xB;peripheral or&#xB;memory     full trace capability on&#xB;hardened part of the soc</slidetext><slidetext slideid="4umoxjgClbn.6FiLzrK5U2s" slidebank="false" type="slide"> export cross trigger interface to custom hardware 52 export hps cti or trace interfacesconnect to your custom cross trigger modulesnot for use with signaltap ii logic analyzer   stm events allows synchronization with program trace </slidetext><slidetext slideid="4umoxjgClbn.6aLQRC99E0a" slidebank="false" type="slide"> signaltap ii configuration for cross trigger 53 hps -&gt; fpga cross triggerallow the breaking in the running of the hps core to act as the trigger in condition for signaltap ii logic analyzer fpga -&gt; hps cross triggerallows signaltap ii trigger out to break the execution of the hps coreallow trigger out to generate hardware event in the hps program trace   qsys hps component export of cross trigger interface must be disabled  </slidetext><slidetext slideid="4umoxjgClbn.6XgsmWWCXL6" slidebank="false" type="slide"> run debugger and signaltap ii logic analyzer 54 run signaltap ii logic analyzer and ds-5 debuggerhps -&gt; fpga cross triggerfpga -&gt; hps cross trigger        </slidetext><slidetext slideid="4umoxjgClbn.5bubpfKHLbA" slidebank="false" type="slide">  viewing non-intrusive events 55 view captured events with timestampcorrelate with program traceselect synchronize timestamps then program trace and source code will highlight the position of the code when the event happened. event data = event id + 4  timestamp  fpga generated events      right-click on line item</slidetext><slidetext slideid="4umoxjgClbn.5bQfgnLr31F" slidebank="false" type="slide"> qsys flow soc design flow review 56 create quartus project(with  soc device) create qsys system   add, configure, and connect components includinghps, custom ip, and other off-the-shelf ip  generate qsys system instantiate qsys system in quartus project  run analysis &amp; elaboration  create i/o assignments(ddr,hps bank vcc)  compile quartus project  sw handoff hw verification  perform functional simulation  </slidetext><slidetext slideid="4umoxjgClbn.5XVKEMi2JhJ" slidebank="false" type="slide"> follow-on training 57 altera instructor led trainingsdesigning with an arm based socdeveloping software for an arm-based socaltera online trainingsintroduction to qsyssoc hardware overviewthe microprocessor unitinterconnect and memorysystem management, debug and gp peripheralsflash controllers and interface protocolssoc software design flowin-depth trainings available from our partnersarm, doulos, etc</slidetext><slidetext slideid="4umoxjgClbn.6frAklP3y6Z" slidebank="false" type="slide"> give us your feedback 58 when you registered for this training you received a confirmation emailplease click on the link in the email to complete a short surveyyour feedback is important to help us improve future trainings!</slidetext><slidetext slideid="4umoxjgClbn.6gOgcqWqcp1" slidebank="false" type="slide"> thank you</slidetext></search></nav_data><resource_data description="" /><transcript_data><slidetranscripts><slidetranscript slideid="4umoxjgClbn.64eNrQIRQYZ" slidebank="false" type="slide" noteswf="presentation_content/notes/64eNrQIRQYZ.swf" notespng="mobile/notes/64eNrQIRQYZ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Welcome to Altera’s hardware design flow for ARM based SoC online training. My name is Karl. This is a high level training focused on the hardware design methodology needed to create an embedded system with our SoC devices.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5qqlrXbsaN5" slidebank="false" type="slide" noteswf="presentation_content/notes/5qqlrXbsaN5.swf" notespng="mobile/notes/5qqlrXbsaN5.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here are the topics we’re going to be discussing. First, we’ll go over the an overview of the SoC devices, we’ll talk about the components and the system design flow. Then we’ll dive in to the hardware design flow. We’ll talk about Quartus and Qsys tools including the instantiation of the Hard Processor system or HPS as well as bringing in custom components in to the environment. In this section we’ll also discuss the hardware software handoff files generated by qsys for the software or firmware engineers.&lt;br&gt;Then we’ll about debug options. We’ll discuss the features of qsys that makes simulation easy as well as onchip component debug options. Lastly we’ll briefly discuss FPGA adaptive software debug features in the ARM DS-5 eclipse based tool that’s shipped with Altera’s embedded development suite. &lt;br&gt;&amp;lt;&lt;br&gt;Now lets first talk about an over view of the device.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5XnPKPKiY9t" slidebank="false" type="slide" noteswf="presentation_content/notes/5XnPKPKiY9t.swf" notespng="mobile/notes/5XnPKPKiY9t.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;For a typical system development, here are all of the components. At the very bottom, the foundation of the system is the hardware or silicon devices. With in those devices there are IP cores that performs particular function, on top of that there's the control and status register view of those component. Crossing in to the software domain, we may see hardware libraries that'll abstract away some of those register view for the firmware developers, then we'll see driver development for a particular IP component. Above that there's Board support package, operating system, middleware such as ethernet stacks, and finally the user application software sit at the very top of the development layers. For this presentation which is meant for FPGA engineers we'll focus on the bottom three layers, the devices in which Ips are implemented, the IPs themselves including soft IP in the FPGA and then the register view to allow the lowest level of software access.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.63kmBaFei5B" slidebank="false" type="slide" noteswf="presentation_content/notes/63kmBaFei5B.swf" notespng="mobile/notes/63kmBaFei5B.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here's the System development flow, since this is the hardware development flow training we'll focus on the features in the left column, but Altera does provide tools necessary to carry out software development but that's discuss in a separate online training. On the hardware side, we start with the Quartus design software which is used to synthesize and then placement and route RTL source files. The Qsys system integration tool actually generates the RTL sources, it is a front end tool that allows you to bring together various IPs together quickly and automatically generate synthesizable interconnects. Once the hardware system is created, you'll likely want to functionally simulate it, and Bus functional models supported by the qsys system will make that easy, and we will talk about that later. You may also wish to verify your IP in hardware using FPGA tools such as SignalTapII embedded logic analyzer or system console and you could use those tools in the SoC environment as you normally would in a FPGA system. Finally once everything is ready the FPGA hardware needs to be programmed into flash ready for release to make the software design flow go easy, the qsys system integration tools used to bring the hard processor system together with other components will generate handoff files to make the creation of second stage boot software and board support packages easy for you. We will briefly talk about those tools but they are really the focus of another online training.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.67WKLdka9jg" slidebank="false" type="slide" noteswf="presentation_content/notes/67WKLdka9jg.swf" notespng="mobile/notes/67WKLdka9jg.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here’s a more detailed block diagram of the SoC device. The portion in blue is the Hard processor system HPS, and it contains the dual-core processor, each CPU with its own floating-point unit, NEON coprocessor, and L1 caches. The processors share a 512-KB L2 cache and a rich set of peripherals, including two triple-speed Ethernet ports, two USB on-the-go ports, interfaces to flash memory, general-purpose embedded peripherals such as UART, SPI, CAN, and I2C, and a shared multiport front end SD DRAM controller that supports DDR2, DDR3, and LPDDR2  all with ECC.&lt;br&gt;&lt;br&gt;Dedicated fast speed interfaces connect the HPS and FPGA fabric. There is also  a direct connection from the FPGA to the SDRAM controller in the HPS. The processor can also direct access the FPGA configuration controller so it can configure the FPGA under software control.&lt;br&gt;&lt;br&gt;The green portion represents the FPGA fabric include all of the usual components and the grey blocks represent additional hard IP functions available to your FPGA custom logic, including additional multi-port SDRAM controllers, PCIExpress ports, and high-speed serial transceivers. &lt;br&gt;&lt;br&gt;The HPS and FPGA have their own dedicated I/O and can share some I/O functions when necessary.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6eQLpGwLEHM" slidebank="false" type="slide" noteswf="presentation_content/notes/6eQLpGwLEHM.swf" notespng="mobile/notes/6eQLpGwLEHM.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The Hard Processor System include more than just the processors. Here are a list of the prominent components. The multi processor unit feature dual ARM cortex A9 processors are augmented by a hard SDRAM controller, a general purpose DMA controller from ARM, Ethernet controllers from synopsis, multiple flash interfaces and many serial interfaces including USB, SPI, I2C CAN, there are also UARTs and GPIO interfaces in the HPS.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6ZWPc1BrerQ" slidebank="false" type="slide" noteswf="presentation_content/notes/6ZWPc1BrerQ.swf" notespng="mobile/notes/6ZWPc1BrerQ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;As you’re going through this training, as a FPGA designer, you should find the hardware portion very similar to the traditional methodology. This is because when we designed the devices, we had a goal to make traditional FPGA designers as well as ARM designers feel at home.&lt;br&gt;&lt;br&gt;We want FPGA engineers to feel comfortable that the normal FPGA flow and design is the same as it has always been.  The integrated hard processor core will have no impact on their normal FPGA environment. So all the usual development and debugging tools are still available.&lt;br&gt;&lt;br&gt;Similarly, for ARM software engineers, the typical ARM environment that you are used to is the same environment you will use to develop for the embedded ARM SoC.  It should be transparent to you as if it were two separate chips.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6mUHWr3kqbh" slidebank="false" type="slide" noteswf="presentation_content/notes/6mUHWr3kqbh.swf" notespng="mobile/notes/6mUHWr3kqbh.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we've seen what the SoC devices are all about, lets dive in to the Hardware design flow, and we'll first examine Quartus and Qsys tool flows including HPS component instantiation and custom  components that the Hard processor system interacts with.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6UDirCGOvCw" slidebank="false" type="slide" noteswf="presentation_content/notes/6UDirCGOvCw.swf" notespng="mobile/notes/6UDirCGOvCw.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This is the complete Quartus and Qsys design flow for use with the SoC devices. We will talk about most of these items in detail. On a high level, you start with a quartus project, with in the project create a qsys system that instantiates the HPS, custom IP, and other off the shelf IP available from Altera or third party vendors. Then, generate the system which will create simulatable or synthesizable HDL versions of the system depending on the generation options. Software handoffs generated will go to the firmware engineer. From that point, you can functionally simulate or include the generated qsy system in the Quartus project. In quartus, run analysis and elaboration to allow the tool to understand the hierarchy of the design, then create IO assignments using a script generated by qsys and manually set IO assignments for other general purpose FPGA IOS, and finally run a full compile. Once an FPGA programming bitstream is completed you'll be able to perform hardware verification before product release.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5uslVs7K792" slidebank="false" type="slide" noteswf="presentation_content/notes/5uslVs7K792.swf" notespng="mobile/notes/5uslVs7K792.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;As we said earlier, the first thing is to create a quartus project.. The easiest way to do this is to use the New project wizard. A quartus project is simply a collection of all source files and setting regarding a particular design. When creating the project for use with the SoC device, make sure to select a family that contains the Hard Processor system those families usually starts with an S. There are several families subfamily that includes the HPS. In the cyclone V family, there are SE, SX and ST variants, in the Arria V family there are the SX and ST subfamiles, and in Arria 10 there’s the SX subfamily.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5g37SvC263m" slidebank="false" type="slide" noteswf="presentation_content/notes/5g37SvC263m.swf" notespng="mobile/notes/5g37SvC263m.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once the SoC project is created, you are required to use the Qsys system integration tool to instantiate and connect the HPS and other relevant components.&lt;br&gt;&lt;br&gt;The Qsys system integration tool saves significant time and effort in the FPGA design process by automatically generating interconnect logic to connect intellectual property (IP) functions and subsystems. &lt;br&gt;It significantly simplifies the process of generating a system. The idea is to have all components including custom ones conform to a standard interface such as Avalon or AXI and since Qsys understands these interfaces it can automatically generate the interconnect for those components and interfaces. You can use the tool to quickly integrate IP, to author custom IP, and to verify the components or system using standard simulation or on chip methods.&lt;br&gt;&lt;br&gt;&lt;br&gt;Under the hood, Qsys uses a FPGA-optimized network-on-a-chip (NoC) technology delivering higher performance more scalable solutions.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6Hp8XwtefCU" slidebank="false" type="slide" noteswf="presentation_content/notes/6Hp8XwtefCU.swf" notespng="mobile/notes/6Hp8XwtefCU.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To start the Qsys tool simply go to the Quartus tools menu, task pane or tool bar. This window shows what the Qsys tool looks like, from the component library pane you can add various IP including the HPS, or custom IP. In the System contents tab you can make the appropriate connections to and from compatible interfaces, once you’re done, go to the generation tab to generate the appropriate HDL and other supporting files related to the system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6exKVAIdTrP" slidebank="false" type="slide" noteswf="presentation_content/notes/6exKVAIdTrP.swf" notespng="mobile/notes/6exKVAIdTrP.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;In the qsys tools. The component library lists all of the available IP and subsystems that are available and can added to your current Qsys system.  Off the shelf, IP are listed under the Library section and subsystems are listed under the Project section.  Any custom IP or components available will also be under the Project section.  We will discuss custom components later in the presentation.&lt;br&gt;&lt;br&gt;The component library is organized by categories to make it easier to find the IP you need.  Just expand the category and possibly subcategories and highlight the component that you want to add to your system.  To add a component to your system, double-click on the on the component name or click on the Add button with the component highlighted.  You can also use the search field to filter the component library by name.  Just start typing in characters and Qsys dynamically filters the list as you type.&lt;br&gt;&lt;br&gt;The screen capture shows the Hard Processor system component which is located inside the embedded processors folder of the component pick list.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6Sik0F7Nh3G" slidebank="false" type="slide" noteswf="presentation_content/notes/6Sik0F7Nh3G.swf" notespng="mobile/notes/6Sik0F7Nh3G.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once the components are instantiated in the system contents tab. You can make the connection to and from appropriate interfaces in one of two main ways. First you can use the connections column. Here, compatible connections are shown in gray with a circle, clicking on a hollow circle will darken the connection which indicates a particular set of interfaces is connected.&lt;br&gt;&lt;br&gt;When you have a lot of components it maybe difficult to find the correct connections, in this case you can consider right clicking on a particular interface which will show you a set of legal connections and you can make the choice to connect from there.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5z51lgwfk9X" slidebank="false" type="slide" noteswf="presentation_content/notes/5z51lgwfk9X.swf" notespng="mobile/notes/5z51lgwfk9X.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now lets take a look at HPS component instantiation.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5uWWPVoEOTR" slidebank="false" type="slide" noteswf="presentation_content/notes/5uWWPVoEOTR.swf" notespng="mobile/notes/5uWWPVoEOTR.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Unlike soft processors, the Hard processor system components are fixed, but their operations are not. When we configure the HPS, most of the options are regarding the interfaces. The first tab of the HPS configuration is related to the interface to and from the FPGA. In the general section, you can enable options that can send events to and from the FPGA, direct the GPIOs to and from the FPGA, enable boot signals from the FPGA, and allow the connection of debug interfaces in to the HPS including Cross Trigger, System Trace Macrocell, and Debug APB bus interfaces.&lt;br&gt;&lt;br&gt;On this tab you can also enable the three bridge that connects to the FPGA side, the FPGA to HPS bridge, HPS to FPGA bridge, and the latency sensitive lightweight HPS to FPGA interface.. For the high performance bridges you can also set the bridge width from the FPGA side.&lt;br&gt;&lt;br&gt;If you choose to enable and configure direct FPGA access of the HPS SDRAM if you want this will be the fastest way to transfer data from the FPGA side.&lt;br&gt;&lt;br&gt;In the reset section you can allow the FPGA to reset the HPS or have the HPS send reset signals to the FPGA.&lt;br&gt;&lt;br&gt;IN the DMA peripheral request section, you can enable the peripheral request signals to allow the FPGA components to request DMA transfers using the ARM DMA inside the HPS.&lt;br&gt;&lt;br&gt;Lastly you can enable peripheral interrupts to and from the FPGA to the HPS.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6PnvEKJZJAB" slidebank="false" type="slide" noteswf="presentation_content/notes/6PnvEKJZJAB.swf" notespng="mobile/notes/6PnvEKJZJAB.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The IO interface also needs to be set. On the peripheral pin tab, you can implement the pin set assignments for specific peripherals. In this tab, peripheral interfaces are enabled and in some cases modes of the peripheral can be selected. For example with the QSPI peripheral 1,2 or 4 chip select outputs can be selected.&lt;br&gt;&lt;br&gt;Each peripheral goes to at least one pin mux. The pin muxes are controlled by selecting a specific HPS I/O set. Choosing an IO set determines which I/O pins will be used for this interface. For more details on which pins can be used for a specific peripheral please see the Pin Connection Guidelines for the various SoC Devices.&lt;br&gt;&lt;br&gt;The GUI for the Arria 10 devices will look different because most IOs are actually shared between the FPGA and HPS but the same idea exists that you’ll need to assign modes and pins to the peripherals&lt;br&gt;&lt;br&gt;If there is a conflict when making pin assignments to the peripherals. The Qsys tools will show an error and you will need to ensure the HPS component is error free before you’re allowed to generate the system.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6GxGtFT2T2S" slidebank="false" type="slide" noteswf="presentation_content/notes/6GxGtFT2T2S.swf" notespng="mobile/notes/6GxGtFT2T2S.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;In the HPS Clocks tab, you can set all options related to the clock and the parameters are transferred to the 2nd Stage bootloader software as part of the HW SW hand offs. You can set the frequencies of the processors and peripherals here, and The frequency of the PLLs are set by software using specific API calls that are available in the SW library. &lt;br&gt;&lt;br&gt;Here you will also able to create connections for FPGA clocks to drive the HPS for use by the peripherals and SDRAM. Clock source selections are made here as well the ability to send HPS clocks into the FPGA.&lt;br&gt;&lt;br&gt;It’s some times a good idea to synchronize clocks between the HPS and the FPGA to speedup the transfer of data. With out the synchronization, a clock crossing bridge will have to be implemented which impacts performance of the bridges.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6KpVk0zpeSd" slidebank="false" type="slide" noteswf="presentation_content/notes/6KpVk0zpeSd.swf" notespng="mobile/notes/6KpVk0zpeSd.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;For Cyclone V and Arria V SoCs, The HPS hard SDRAM controller is also configured in the HPS component dialog box since the Hardened SDRAM Controller is inside the HPS&lt;br&gt;&lt;br&gt;As you can see the SDRAM configuration is similar to other  SDRAM controllers that could be added in Qsys.&lt;br&gt;&lt;br&gt;The 28nm SDRAM controller support DDR3, DDR2 and LPDDR2. &lt;br&gt;&lt;br&gt;To properly implement the memory controller, enter the specifications from the specific memory device you're using and also enter board parameters as well.&lt;br&gt;&lt;br&gt;This way the calibration algorithm can run properly during the preloader stages of the boot process.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6WlSEmuBCRe" slidebank="false" type="slide" noteswf="presentation_content/notes/6WlSEmuBCRe.swf" notespng="mobile/notes/6WlSEmuBCRe.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;For arria 10 since the external memory controller actually resides in the FPGA the instantiation will be a little different. For Arria 10, the SDRAM is instantiated with a separate component called the Arria 10 external memory interface for HPS and this component can then be connected to the Arria 10 HPS using a dedicated conduit connection in qsys. Arria 10 SDRAM is configured by the FPGA bitstream and although the bitstream can be loaded by the SSBL, the SDRAM is not directly configured by the second stage bootloader directly.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6cCf2og9Uaq" slidebank="false" type="slide" noteswf="presentation_content/notes/6cCf2og9Uaq.swf" notespng="mobile/notes/6cCf2og9Uaq.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once you’ve finished configuring the HPS system, you’ll be able to generate the appropriate HDL files for the system.&lt;br&gt;&lt;br&gt;Depending on the options you choose, you can generate for simulation, testbench or synthesis and in either verilog or VHDL.&lt;br&gt;&lt;br&gt;The outputs will be located appropriate directory. In addition to the HDL for the system and the interconnect, when you generate you also generate software handoff files used by the software debugger, or linux device tree input. We’ll talk about those later.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6pYZQbuFae7" slidebank="false" type="slide" noteswf="presentation_content/notes/6pYZQbuFae7.swf" notespng="mobile/notes/6pYZQbuFae7.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here we see the different files generated by Qsys and Quartus and how they are used by the software tools. &lt;br&gt;First Quartus generates the SOF FPGA bitstream used to configure the FPGA portion of the SoC&lt;br&gt;&lt;br&gt;For software purposes, a handoff directory is created for use by the Second stage bootloader generator which creates the software source files necessary to configure the clocks, io pin mux, and configure the SDRAM via either software or fpga image depending on family.&lt;br&gt;&lt;br&gt;.svd file is a description of soft IP peripheral registers in FPGA .  This can be used in a similar fashion as symbol files in the software debugger giving you access to the hardware registers directly from the ARM software debugger. Each individual fpga peripherals whether custom of off the should would need to have an svd file that gets aggregated when qsys generation happens. This can then be imported into the ARM DS5 debuggers so that in the debugger register view you’ll see the FPGA registers as well as the associated help on the functionality.&lt;br&gt;&lt;br&gt;Lastly, the .sopcinfo file output of Qsys is used by the Device Tree generator.  The device tree standard specifies hardware connectivity so that Linux kernel can load those drivers without rebuilding the kernel. This makes your linux kernel flexible regarding the changing FPGA hardware available. The SOPC info file can also be used by the system header file generation tool to create the soc_system.h which contain MACROs that represent the FPGA Qsys system.&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6EDmfkAhHh7" slidebank="false" type="slide" noteswf="presentation_content/notes/6EDmfkAhHh7.swf" notespng="mobile/notes/6EDmfkAhHh7.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we under stand basic Quartus and Qsys tools including  the HPS component, now, lets take a look at how implement custom components in the FPGA that interacts with the HPS.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6OZ0986mzos" slidebank="false" type="slide" noteswf="presentation_content/notes/6OZ0986mzos.swf" notespng="mobile/notes/6OZ0986mzos.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Qsys can integrate different components together but the components needs to conform to one of the supported standard interface. There are many advantages of conforming your custom IP to a standard interface. This ensure compatibility with other components, makes design entry easy by using a tool such as qsys, and it makes it very easy to verify as you’ll see later.&lt;br&gt;&lt;br&gt;Qsys support many standard interfaces. This include Avalon memory mapped interfaces where there’s a master requesting reads and writes from a slave… There’s Avalon streaming which is meant for point to point high through put application and there are many ARM AMBA interfaces including AXI 3, AXI4, APB, and AHB. The HPS bridges are AXI 3.0 compliant.&lt;br&gt;&lt;br&gt;If your custom component conforms to one of these standard, your component can be seamlessly integrated with other IP by the Qsys tools.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.61lXGHm6UJ8" slidebank="false" type="slide" noteswf="presentation_content/notes/61lXGHm6UJ8.swf" notespng="mobile/notes/61lXGHm6UJ8.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Before conforming to a specific interface standard, it’s important to understand the interface completely and this can be done by reading the specifications published by altera or ARM&lt;br&gt;&lt;br&gt;The avalon specifications are published by Altera it is relatively simple to implement. The document will explain implemented signals with use cases and waveforms.&lt;br&gt;&lt;br&gt;The AXI interface is a lot more complex and is tuned for throughput. Information regarding that is published by ARM.&lt;br&gt;&lt;br&gt;Qsys supports both and communication across interfaces are automatically handled, for example you can have a AXI master talking to a Avalon Slave or a Avalon master talking to a AXI slave.&lt;br&gt;&lt;br&gt;The decision of which standard to use is completely up to you and your situation. If you already have IP that conform to those specification, you can continue using those standards, if you want something simple then Avalon is the answer, but if you would like to implement complex interfaces that include security then AXI is the way to go.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5y63ZTjvGJQ" slidebank="false" type="slide" noteswf="presentation_content/notes/5y63ZTjvGJQ.swf" notespng="mobile/notes/5y63ZTjvGJQ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Before custom components can be instantiated in Qsys. You’ll need to create them first. The easiest way to do that is the use the component editor. In the component editor, you specify the HDL that pertains to your component. You can also specify the instantiation parameters that usually correspond to Verilog parameters or VHDL generic, this way every instance can be different making your IP more reusable. But the most important task of the Component editor is to map the HDL ports to standard interface types and signals and then define the property of the interfaces. Once the interfaces are know to Qsys it can connect it to other components with the necessary components needed to bridge the interfaces.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5uKWOUGaLeX" slidebank="false" type="slide" noteswf="presentation_content/notes/5uKWOUGaLeX.swf" notespng="mobile/notes/5uKWOUGaLeX.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;One final note on custom components, when creating a custom component, you should consider adding a System View Description or SVD file, this describes the register set of your custom FPGA peripheral to the ARM DS5 debugger allowing the debugger to view and change custom IP in the FPGA fabric. This XML formatted file is available for off the shelf altera IPs and could be created for custom components to allow self documenting easy debug.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.61h9iS5mRcy" slidebank="false" type="slide" noteswf="presentation_content/notes/61h9iS5mRcy.swf" notespng="mobile/notes/61h9iS5mRcy.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we understand Quartus and Qsys tool flow, let's look at SoC Hardware system debug. We'll start with functional simulation.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6l5FleyxLro" slidebank="false" type="slide" noteswf="presentation_content/notes/6l5FleyxLro.swf" notespng="mobile/notes/6l5FleyxLro.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To make verification of custom IPs easy, Qsys supports Bus Functional Models for both AXI and Avalon interfaces. Bus functional models allow for easy simulation of components by abstracting away the signals of the interfaces and allowing you to issue commands and responses to a Design Under test through a software like application programming interface. The AXI BFMs in Qsys are provided by Mentor Graphics and are written in SystemVerilog although VHDL hooks are available for some of the functionality. You can use the BFM to see if an interface conform to the protocol specifications as well as test the functionality of the interface. AXI BFMs can also be used to simulate the HPS AXI bridges. Avalon BFMs are available from Altera to test Avalon component interfaces. With BFMs you can rapidly verify your FPGA IP because it’s quick to instantiate various BFMs for each interface and test them through the given API.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6IFqMoW4cAP" slidebank="false" type="slide" noteswf="presentation_content/notes/6IFqMoW4cAP.swf" notespng="mobile/notes/6IFqMoW4cAP.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To simulate an HPS system, follow the steps here. First create the system, then when generating the system set to generate either simulation model or testbench system. When generating for simulation model, a model of the system will be generated. when generating a testbench system, a model of the system will be generated in addition to BFMs for any interfaces that are exported.&lt;br&gt;&lt;br&gt;In the third step, you'll write the test program that provides the stimuli for the system. &lt;br&gt;&lt;br&gt;Lastly create and run simulation script for your chosen Simulator.&lt;br&gt;&lt;br&gt;You can use these steps to test both individual components as well as an entire system.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5aEjQSguPmT" slidebank="false" type="slide" noteswf="presentation_content/notes/5aEjQSguPmT.swf" notespng="mobile/notes/5aEjQSguPmT.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To test an individual component, first create a Qsys system that has the component interfaces exported, then when you generate a testbench system, Clock, Reset, Master, and Slave BFMs will be inserted automatically for you. If you're testing a Slave interface, an master BFM will be inserted that allows your test program to issue commands. If you're testing a master interface, a slave BFM will be inserted to allow you to respond to commands. Monitor BFMs can be used to watch traffic and do coverage and protocol checking but they will need to be manually inserted into a Qsys system.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6ZXZczTsYYk" slidebank="false" type="slide" noteswf="presentation_content/notes/6ZXZczTsYYk.swf" notespng="mobile/notes/6ZXZczTsYYk.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;If you're performing a system simulation. You can generate a system for testbench Clock, Reset, and Condult BFMs will be inserted to allow you to simulate the system as if it was interacting with outside components. Here you would control the BFM through the test program and test program will be used to simulate input and outputs of the system through the conduit BFMS&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5zFs9hVQKEY" slidebank="false" type="slide" noteswf="presentation_content/notes/5zFs9hVQKEY.swf" notespng="mobile/notes/5zFs9hVQKEY.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The HPS component itself is too complex to be simulated. So when you generate a system with HPS component in it, instead of generating a simulation model of the component, BFMs will be inserted to simulate the behavior of the HPS/FPGA interface. For example Master AXI BFM will be inserted where the high speed hps to fpga bridge reside. And AXI slave bFM will be inserted where the Fpga to hps bridge resides. In addition, many clock and conduit bfms will be added as well. On the other hand pin side interfaces of the HPS will be unconnected.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6L0rXzGSGtW" slidebank="false" type="slide" noteswf="presentation_content/notes/6L0rXzGSGtW.swf" notespng="mobile/notes/6L0rXzGSGtW.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;On the generation tab, you’ll see several options regarding generation for simulation. First you have the option to create only a simulation model for your system with either Verilog or VHDL. When doing this you’ll need to create a separate and custom testbench in order to exercise the simulation model.&lt;br&gt;&lt;br&gt;Alternatively you can create a testbench system which includes the simulation model in addition to BFM depending on your setting. If you choose Standard, BFMs will be inserted for all exported interfaces this is most useful for component testing.. If you choose to create a simple system, only clock and reset bfms will be added this more suitable for system testing. For testbenches you also have the option to generate for either verilog or VHDL.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6O0m4J9yb1K" slidebank="false" type="slide" noteswf="presentation_content/notes/6O0m4J9yb1K.swf" notespng="mobile/notes/6O0m4J9yb1K.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here’s an example of a test program written in verilog to exercise AXI BFMs. First the import command imports the AXI BFM Package provided by Mentor Graphics.  Then we instantiate the qsys testbench system. Later in the initial block master thread, we first assemble a master transaction then send the transaction through the BFM API. You can see this is much easier than setting individual interface signals at the appropriate time. &lt;br&gt;&lt;br&gt;In the slave thread, we first use the API to wait for a transaction then we’ll setup a response to the command and finally send the response. Again this is much easier to do than traditional hdl testbenches.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6FqO3kkpMlB" slidebank="false" type="slide" noteswf="presentation_content/notes/6FqO3kkpMlB.swf" notespng="mobile/notes/6FqO3kkpMlB.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once the test program is created you can modify then run the simulation test scripts. When you use qsys to generate for simulation, qsys automatically generates scripts for major simulator. The scripts for each vendor will be located in the appropriate generated directory.&lt;br&gt;&lt;br&gt;The generated script will automatically setup simulation environment, create and compile device libraries and sources files and run the simulation.&lt;br&gt;&lt;br&gt;You can of course modify the script to customize your simulation environment.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6bzDtrnUfWf" slidebank="false" type="slide" noteswf="presentation_content/notes/6bzDtrnUfWf.swf" notespng="mobile/notes/6bzDtrnUfWf.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To learn more about simulating SoC systems in qsys feel free to read the Mentor or Avalon verification IP user guides. The quartus hand book has a qsys chapter that talks about the different generation features and the Cyclone V and Arria V device handbooks also contain information on how to simulate the HPS.&lt;br&gt;&lt;br&gt;Lastly we offer the Intro to Qsys as well as the Advanced Qsys classes that has detailed information on how to use the BFMs as well as several relevant free online training including one for Avalon Verification Suite.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6dbilQTbrxN" slidebank="false" type="slide" noteswf="presentation_content/notes/6dbilQTbrxN.swf" notespng="mobile/notes/6dbilQTbrxN.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now lets talk about on-chip component debug.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5n81UwibHxR" slidebank="false" type="slide" noteswf="presentation_content/notes/5n81UwibHxR.swf" notespng="mobile/notes/5n81UwibHxR.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;System console is the tool inside the quaruts ii tools allowing you to perform low level system debug of your qsys components without the availability of software.&lt;br&gt;Everything in system console is very easy to use and you can issue commands through a Tcl interface. Debug can be done over any traditional debug interface such as JTAG, USB, or even TCP IP. Through the System Console you can read from or write to any memory mapped component and you can do all of this without the processor.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6QMwv3F1EPb" slidebank="false" type="slide" noteswf="presentation_content/notes/6QMwv3F1EPb.swf" notespng="mobile/notes/6QMwv3F1EPb.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To perform debug using the system console you’ll need one of these components depending on the task at hand. To test a memory mapped slave component over JTAG you’ll need either a Nios II processor or JTAG to Avalon master bridge. To debug over a direct USB connection you’ll need the USB debug master. To communicate with JTAG UARTs in the FPGA you’ll need that component, finally to test streaming components you’ll need the Avalong Streaming JTAG interface. These components needs to be manually instantiated and connected in the Qsys tools.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6W805rIfZ7Z" slidebank="false" type="slide" noteswf="presentation_content/notes/6W805rIfZ7Z.swf" notespng="mobile/notes/6W805rIfZ7Z.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;There are several methods to launch the system console tools you can do so from the Qsys tools menu, from the Nios II command shell, or the Embedded command shell that comes with the SoC embedded development suite. If you’re launching the tool from the command shell, simply type system-console.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6KER4q32jsK" slidebank="false" type="slide" noteswf="presentation_content/notes/6KER4q32jsK.swf" notespng="mobile/notes/6KER4q32jsK.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once system console launches, you should see these window panes. The system explore pane allows you to view a hierarchy of the System Console virtual file system in your design, which may include connections, designs, design instances, devices, and scripts. When you write scripts and specify the path where they are located in the environment settings of your operating system, you can then run the scripts from the System Explorer. &lt;br&gt;&lt;br&gt;The Tools pane, which is blank here, allows you to launch tools that use the System Console framework or to enable GUI widgets created by your script.&lt;br&gt;&lt;br&gt;The Tcl Console pane allows you to run commands and Tcl scripts from within the System Console, you can also source tcl scripts.&lt;br&gt;&lt;br&gt;Finally, the Messages pane displays messages generated when running tools within the System Console.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.65oApOJgFDZ" slidebank="false" type="slide" noteswf="presentation_content/notes/65oApOJgFDZ.swf" notespng="mobile/notes/65oApOJgFDZ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;System console tasks are grouped by services. Each service is a collection of functions available to accomplish a certain type of tasks.&lt;br&gt;Services maybe associated with particular components and most services and paths to compatible devices and IP are automatically discovered when system console start.&lt;br&gt;&lt;br&gt;You can run get service types to see all of the available service types.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5lYpQPudzRc" slidebank="false" type="slide" noteswf="presentation_content/notes/5lYpQPudzRc.swf" notespng="mobile/notes/5lYpQPudzRc.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here’s a list of commonly used services.&lt;br&gt;&lt;br&gt;The jtag_debug service requires the “JTAG to Avalon Masters Bridge” .  It provides JTAG chain debug and Qsys system clock and reset testing capabilities.&lt;br&gt;&lt;br&gt;The device service allows you to program a new SOF into your FPGA.&lt;br&gt;The bytestream service allows you to send and receive streams of bytes to compatible Qsys components such as the jtag uart.&lt;br&gt;&lt;br&gt;Most importantly, The master service allows you to read and write to any Avalon MM slave in your Qsys system.&lt;br&gt;The monitor service type allows you to efficiently read from a large range of address at a regular interval.&lt;br&gt;And finally the dashboard service allows you to easily create widges such as buttons, dials, and charts that makes automation of tests easy.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6PxQEOsOY0d" slidebank="false" type="slide" noteswf="presentation_content/notes/6PxQEOsOY0d.swf" notespng="mobile/notes/6PxQEOsOY0d.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This slide displays the basic flow when opening and using  services provided by the System Console.&lt;br&gt;  &lt;br&gt;The System Console uses a virtual file system to organize the available services, which is similar to the /dev location on Linux systems. Instances of services are referred to by their unique service path in the file system..&lt;br&gt;&lt;br&gt;After ensuring that the necessary components are added to your system and  your board is properly configured.&lt;br&gt;Launch System Console and it’ll be ready for interactive usage.&lt;br&gt;You then will need to find the service.  This is done using the “get_service_paths” command.  After locating your service, it’s convenient to set a variable equal to it.  This is what is done in step 4 here. I’m calling get_service_paths to return all master paths, then using tcl syntax to set the 0th item in the list to my variable m_path.&lt;br&gt;&lt;br&gt;Once the service is found, I can open the service using the variable defined in the previous step.  &lt;br&gt;&lt;br&gt;Step 5 illustrates the sorts of commands that can be performed. In the example here, I’m simply write two bytes of data to address hex 0x2000 and reading the same 2 bytes back.&lt;br&gt;&lt;br&gt;In the last step, I close the service once I’m done with everything.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.67QEv0Kg9AX" slidebank="false" type="slide" noteswf="presentation_content/notes/67QEv0Kg9AX.swf" notespng="mobile/notes/67QEv0Kg9AX.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Dash boards are great to automate testing, it’s very easy to create widgets that helps you interact with live instances of an IP core.. For example you can create buttons that perform a series of tasks and you can display results of the tests through dials, charts, leds etc. To find out more about system console and specifically the dashboard features, please view our free system console online training or attend our advanced qsys system integration tool methodologies instructor led training.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6JVnelRrtIs" slidebank="false" type="slide" noteswf="presentation_content/notes/6JVnelRrtIs.swf" notespng="mobile/notes/6JVnelRrtIs.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;In the final section of this presentation we’ll talk about some FPGA adaptive software debug so you can debug hardware in the FPGA along with the execution of software.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5tbflTnA2C3" slidebank="false" type="slide" noteswf="presentation_content/notes/5tbflTnA2C3.swf" notespng="mobile/notes/5tbflTnA2C3.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The idea of FPGA adaptive debugging is allowing you to synchronize debug actions on the HPS with those on the FPGA side including the SignalTapII logic analyzer. This is done through the use of standard ARM provided coresight compatible IP in the HPS.&lt;br&gt;&lt;br&gt;Several features are provided.&lt;br&gt;First for software development, you can run, step, pause your code across a JTAG connection using Altera’s USB-Blaster cable from the ARM DS-5 tools.&lt;br&gt;With the previously discussed SVD files you’ll be able to change and view HPS and FPGA status and control registers directly debugger.&lt;br&gt;&lt;br&gt;You’ll be able to cross trigger from FPGA to HPS, meaning a hardware signal or signal tap ii logic analyzer trigger out and breaks HPS execution.&lt;br&gt;Or you can perform HPS to FPGA cross trigger where the breaking of code execution in the HPS through breakpoints for example will act as an input trigger for the Signal Tap II logic analyzer or other Hardware signal.&lt;br&gt;&lt;br&gt;Finally you can correlate hardware events with the HPS trace stream without breaking processor execution through events.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6Vo9ThcNdTu" slidebank="false" type="slide" noteswf="presentation_content/notes/6Vo9ThcNdTu.swf" notespng="mobile/notes/6Vo9ThcNdTu.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;ARM Development studio 5 or DS5 is the main software debugging tool for use with the SoC devices. The altera edition of the tool is part of the SoC Embedded Development Suite download from altera.com. This is a development and debugging environment based on the open source eclipse tools and gives you the ability to edit files, manage projects, and see various information through different perspectives such as the C/C++ perspective or Debugging perspectives.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6Iq3OG5pmz2" slidebank="false" type="slide" noteswf="presentation_content/notes/6Iq3OG5pmz2.swf" notespng="mobile/notes/6Iq3OG5pmz2.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;When debugging,  if the components in the FPGA fabric has an associated system view description file then you will be able to view and access those registers directly through the register view in the DS5 debugger making hardware debugging easy. With in the register view are also all of the components in the HPS along with the processor registers.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6CUAV8n6spX" slidebank="false" type="slide" noteswf="presentation_content/notes/6CUAV8n6spX.swf" notespng="mobile/notes/6CUAV8n6spX.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;With in the HPS, there are many coresight compliant cores that allows for cross triggering and the generation of trace data.&lt;br&gt;&amp;gt;&lt;br&gt;Trace data is generated by either the System Trace Macrocell STM or the Program Trace Macrocell PTM associated with each core. The trace data can be stored in 32KB of on chip RAM in the HPS, routed to available RAM, or be routed through trace port interface unit to an external trace unit.&lt;br&gt;&amp;gt;&lt;br&gt;&amp;gt;&lt;br&gt;Cross triggering between the FPGA and HPS are done through the cross trigger interface and the cross matrix, there can be up to 8 cross triggers coming from the FPGA to the HPS and 8 going from the CPU to the FPGA.&lt;br&gt;&amp;gt;&lt;br&gt;Finally there can be up to 28 hardware events generated by the FPGA IP that can be inserted into the trace through the system trace macrocell, these are non intrusive markers.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6FiLzrK5U2s" slidebank="false" type="slide" noteswf="presentation_content/notes/6FiLzrK5U2s.swf" notespng="mobile/notes/6FiLzrK5U2s.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To use the cross trigger or hardware events feature with custom hardware logic in the FPGA you can enable these options when instantiating the HPS component in Qsys. Once the HPS is instantiated connect the ports to the logic you want. &lt;br&gt;&lt;br&gt;If you would like to use hardware events or cross trigger with Signal Tap II logic analyzer then these settings in the HPS needs to be disabled, instead similar settings are made in the SignalTap II window.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6aLQRC99E0a" slidebank="false" type="slide" noteswf="presentation_content/notes/6aLQRC99E0a.swf" notespng="mobile/notes/6aLQRC99E0a.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;If you would like the HPS executing to cause a trigger in the signal tap ii instance, then in signal tap II within trigger setting, set the Trigger In of signal tap to the Trigger out of the HPS as shown in the diagram.. You can also specify the pattern of the trigger as with any other trigger condition.&lt;br&gt;&lt;br&gt;To enable FPGA to HPS cross trigger where the DS5 debugger is stopped by the signal tap ii trigger then set the trigger out of signal tap to the HPS trigger in.&lt;br&gt;&lt;br&gt;If you would like signal tap to produce non intrusive hardware events in the HPS program trace, set the trigger out to be the HPS event and assign it a value from 0 to 27.&lt;br&gt;&lt;br&gt;As a reminder before doing this the HPS component export of cross trigger interfaces must be disable to do this.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6XgsmWWCXL6" slidebank="false" type="slide" noteswf="presentation_content/notes/6XgsmWWCXL6.swf" notespng="mobile/notes/6XgsmWWCXL6.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Once the configuration is done, you’ll need to enable the cross trigger feature in the DS5 tool and then you’ll be able to run both signal tap ii and DS5 debugger and once HPS stops it will trigger a signal tap ii capture or if there’s a Signal Tap trigger, it will cause the HPS to stop execution.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5bubpfKHLbA" slidebank="false" type="slide" noteswf="presentation_content/notes/5bubpfKHLbA.swf" notespng="mobile/notes/5bubpfKHLbA.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;If you’ve setup nonintrusive hardware events then you can setup the DS5 environment to accept trace and STM events. The events window in the debugger will show the events along with the time stamp and event IDs once the execution is stopped.&lt;br&gt;&lt;br&gt;At that time you’ll also be able to correlate the hardware events with program trace by right clicking on the event to synchronize where the appropriate place in the program trace and source code will be highlighted.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5bQfgnLr31F" slidebank="false" type="slide" noteswf="presentation_content/notes/5bQfgnLr31F.swf" notespng="mobile/notes/5bQfgnLr31F.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here’s a summary of the SoC Hardware design flow again.&lt;br&gt;&lt;br&gt;You start with the Quartus project and set it to compile for one of the SoC devices. Then within qsys, create a system, add, configure, and connect components including the HPS, custom IP or other off the shelf IP. And finally generate the Qsys system which include HDL files of the system along with other files such as software hadnoff files.&lt;br&gt;&lt;br&gt;After generation you can perform functional simulation of components and interfaces using Avalon or AXI BFMs or instantiate the system in your quartus project in order to compile it.&lt;br&gt;&lt;br&gt;You’ll need to run analysis and elaboration first, then make the appropriate IO assignments, and finally perform a full compile of the design to create the FPGA programming bitstream necessary for on-chip hardware debug and release.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.5XVKEMi2JhJ" slidebank="false" type="slide" noteswf="presentation_content/notes/5XVKEMi2JhJ.swf" notespng="mobile/notes/5XVKEMi2JhJ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This concludes my presentation. If you would like to learn more about our SoC products. You may attend the Designing with an Arm based Soc or developing software for an Arm based Soc instructor led trainings. Or we have several relevant online trainings on Qsys as well as SoC overview and SoC software design flow.&lt;br&gt;&lt;br&gt;Finally if you would like more detailed information on the Cortex A9 or the associated peripheral, please attend in-depth training from one of our partners such as Arm, Doulous, and others.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6frAklP3y6Z" slidebank="false" type="slide" noteswf="presentation_content/notes/6frAklP3y6Z.swf" notespng="mobile/notes/6frAklP3y6Z.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;One more thing: when you registered for this on-line training, you should have received a link to a short survey where you can provide feedback.  We’d greatly appreciate it if you’d fill out that survey now.  We’re constantly updating and improving our training materials, and your feedback helps us create the materials that you want!  Thank you for your feedback.  &lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4umoxjgClbn.6gOgcqWqcp1" slidebank="false" type="slide" noteswf="presentation_content/notes/6gOgcqWqcp1.swf" notespng="mobile/notes/6gOgcqWqcp1.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Thanks again for attending the SoC hardware flow online training. My name is Karl and best of luck with all of your designs.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript></slidetranscripts></transcript_data><glossary_data /></bwFrame>