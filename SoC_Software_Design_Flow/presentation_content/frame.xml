<?xml version="1.0" encoding="utf-8"?><bwFrame xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" default_layout="pxnsnfns11111101110" textdirection="ltr" device="false" kbshortcuts="true" outputtype="ap"><layouts><layout name="pxnsnfns11111101110" font="Articulate" controllayout="pxnsnfns11111101110" colorscheme="pxnsnfns11111101110" string_table="pxnsnfns11111101110" /></layouts><control_options><optiongroups><optiongroup name="sidebaroptions"><options><option name="title_enabled" value="true"><options><option name="title_text" value="SoC Software Design Flow" /></options></option><option name="logo_enabled" value="true"><options><option name="logo_url" value="presentation_content/logo.swf"><properties><property name="width" value="218" /><property name="height" value="92" /></properties></option><option name="html5_logo_url" value="mobile/6SM4Lh4cQWF.png" /></options></option><option name="sidebar_enabled" value="true"><options><option name="sidebarpos" value="left" /></options></option><optionlist name="tabs"><listitems><listitem name="resources" value="true" group="linkright" /><listitem name="customlink" value="true" group="linkright"><properties><property name="title" value="Exit" /><property name="data" value="6rn7u8mN5ED" /><property name="ignoreSlideLock" value="true" /></properties></listitem><listitem name="outline" value="true" group="sidebar" /><listitem name="glossary" value="false" group="sidebar" /><listitem name="transcript" value="true" group="sidebar" /></listitems></optionlist><option name="time_enabled" value="false"><options><option name="time_format" value="totalelapsed" /></options></option><option name="info_enabled" value="false"><options><option name="default" value="default" /></options></option><option name="video_enabled" value="false"><options><option name="height" value="135" /></options></option></options></optiongroup><optiongroup name="menuoptions"><options><option name="flow" value="free" /><option name="wraplistitems" value="true" /><option name="tooltips" value="true" /><option name="autocollapse" value="false" /><option name="autonumber" value="true" /><option name="levelbehavior" value="reached" /><option name="levelrestriction" value="unrestricted" /><option name="enableresultsicons" value="false" /></options></optiongroup><optiongroup name="controls"><options><option name="volume" value="true" /><option name="seekbar" value="true"><options><option name="readonly" value="false" /></options></option><option name="search" value="true" /><option name="replay" value="true" /><option name="pauseplay" value="true" /><option name="enableKeyboardShortcuts" value="true" /><option name="elapsedandtotaltime" value="true" /><option name="use_fixed_output_size" value="true" /><option name="output_size_scale_percent" value="100" /></options></optiongroup><optiongroup name="bottombaroptions"><options><option name="bottombar_enabled" value="true" /></options></optiongroup></optiongroups></control_options><control_layouts><control_layout name="pxnsnfns11111101110"><control name="volume" enabled="true" /><control name="seekbar" enabled="true" /><control name="replay" enabled="true" /><control name="pauseplay" enabled="true" /><control name="logo" enabled="true" /><control name="previous" enabled="true" /><control name="next" enabled="true" /><control name="submit" enabled="false" /><control name="finish" enabled="false" /><control name="submitall" enabled="false" /><control name="resources" enabled="true" /><control name="glossary" enabled="false" /><control name="transcript" enabled="true" /><control name="outline" enabled="true"><controls><control name="search" enabled="true" /></controls></control><control name="close_btn" enabled="false" /></control_layout></control_layouts><colorschemes><colorscheme name="pxnsnfns11111101110"><color_group name="infopanel"><group_colors><color name="link_text"><fill type="linear" rotation="90"><colors><color rgb="0x7C2280" alpha="100" stop="0" /></colors></fill></color><color name="link_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="name_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="title_text"><fill type="linear" rotation="90"><colors><color rgb="0x999999" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="infopanelpopup"><group_colors><color name="link_text"><fill type="linear" rotation="90"><colors><color rgb="0x7C2280" alpha="100" stop="0" /></colors></fill></color><color name="link_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="name_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="bio_text"><fill type="linear" rotation="90"><colors><color rgb="0x999999" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="timer"><group_colors><color name="duration"><fill type="linear" rotation="90"><colors><color rgb="0x00D7FF" alpha="100" stop="0" /><color rgb="0x00ABFF" alpha="100" stop="255" /></colors></fill></color><color name="elapsed"><fill type="linear" rotation="90"><colors><color rgb="0xFEE347" alpha="100" stop="0" /><color rgb="0xFCCC2A" alpha="100" stop="255" /></colors></fill></color><color name="stroke"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /></colors></fill></color><color name="inner"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="window"><group_colors><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="inner"><fill type="linear" rotation="90"><colors><color rgb="0xEAEAEA" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xF7F7F7" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xD3D3D3" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0x000000" alpha="20" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="editor"><group_colors><color name="slide_text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="html_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="btn_bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="btn_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /><color rgb="0xAFAFAF" alpha="100" stop="255" /></colors></fill></color><color name="btn_down"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /><color rgb="0xF4F4F4" alpha="100" stop="255" /></colors></fill></color><color name="btn_border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="btn_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_text_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="listitem"><group_colors><color name="selected_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="lines"><fill type="linear" rotation="90"><colors><color rgb="0xDFDFDF" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0xE6E6E6" alpha="100" stop="0" /></colors></fill></color><color name="viewed"><fill type="linear" rotation="90"><colors><color rgb="0x909090" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0xC0E2F1" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="base"><group_colors><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xD3D3D3" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xF7F7F7" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xF3F3F3" alpha="100" stop="255" /></colors></fill></color><color name="menu_shade"><fill type="linear" rotation="90"><colors><color rgb="0xDBDBDB" alpha="100" stop="0" /><color rgb="0xC3C3C3" alpha="100" stop="255" /></colors></fill></color><color name="slide_bg"><fill type="linear" rotation="90"><colors><color rgb="0xE9E9E9" alpha="100" stop="0" /><color rgb="0xCFCFCF" alpha="100" stop="255" /></colors></fill></color></group_colors></color_group><color_group name="button"><group_colors><color name="btn_bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="btn_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /><color rgb="0xAFAFAF" alpha="100" stop="255" /></colors></fill></color><color name="btn_down"><fill type="linear" rotation="90"><colors><color rgb="0xC7C7C7" alpha="100" stop="0" /><color rgb="0xF4F4F4" alpha="100" stop="255" /></colors></fill></color><color name="btn_border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="btn_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_text_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_color"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="btn_glow"><fill type="linear" rotation="90"><colors><color rgb="0xCFCFCF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="checkbox"><group_colors><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="check"><fill type="linear" rotation="90"><colors><color rgb="0x33CC00" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0x6BF8FF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="logo"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="menu"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="scrollarea"><group_colors><color name="bg"><fill type="linear" rotation="0"><colors><color rgb="0xDEDEDE" alpha="100" stop="0" /><color rgb="0xE8E8E8" alpha="100" stop="128" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xF6F6F6" alpha="100" stop="0" /><color rgb="0xF3F3F3" alpha="100" stop="255" /></colors></fill></color><color name="button_bg"><fill type="linear" rotation="90"><colors><color rgb="0xC4C4C4" alpha="100" stop="0" /><color rgb="0xB2B2B2" alpha="100" stop="255" /></colors></fill></color><color name="button_inner"><fill type="linear" rotation="90"><colors><color rgb="0xCBCBCB" alpha="100" stop="0" /><color rgb="0xBABABA" alpha="100" stop="255" /></colors></fill></color><color name="button_border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /></colors></fill></color><color name="icons"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xD9D9D9" alpha="100" stop="0" /></colors></fill></color><color name="detaila"><fill type="linear" rotation="90"><colors><color rgb="0xA7A7A7" alpha="100" stop="0" /></colors></fill></color><color name="detailb"><fill type="linear" rotation="90"><colors><color rgb="0xCFCFCF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="searchinput"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xDFDFDF" alpha="100" stop="0" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xADADAD" alpha="100" stop="0" /><color rgb="0xFAFAFA" alpha="100" stop="255" /></colors></fill></color><color name="icon"><fill type="linear" rotation="90"><colors><color rgb="0x8A8A8A" alpha="100" stop="0" /></colors></fill></color><color name="button_hover"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="hover_glow"><fill type="linear" rotation="90"><colors><color rgb="0x6BF8FF" alpha="100" stop="0" /></colors></fill></color><color name="search_text"><fill type="linear" rotation="90"><colors><color rgb="0x8A8A8A" alpha="100" stop="0" /></colors></fill></color><color name="bg_active"><fill type="linear" rotation="90"><colors><color rgb="0xFAFAFA" alpha="100" stop="0" /></colors></fill></color><color name="text_active"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="seekcontrol"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF5F5F5" alpha="100" stop="0" /><color rgb="0xC7C7C7" alpha="100" stop="255" /></colors></fill></color><color name="border"><fill type="linear" rotation="90"><colors><color rgb="0xB1B1B1" alpha="100" stop="0" /></colors></fill></color><color name="seek_border"><fill type="linear" rotation="90"><colors><color rgb="0xB8B8B8" alpha="100" stop="0" /><color rgb="0xEEEEEE" alpha="100" stop="255" /></colors></fill></color><color name="seek_bg"><fill type="linear" rotation="90"><colors><color rgb="0xE7E7E7" alpha="100" stop="0" /></colors></fill></color><color name="seek_position"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_color"><fill type="linear" rotation="90"><colors><color rgb="0x2D2D2D" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_hover"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="btn_icon_shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="tabs"><group_colors><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xF3F3F3" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x555555" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0x333333" alpha="100" stop="0" /></colors></fill></color><color name="shadow"><fill type="linear" rotation="90"><colors><color rgb="0xF0F0F0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="transcript"><group_colors><color name="div"><fill type="linear" rotation="90"><colors><color rgb="0xE1E1E1" alpha="100" stop="0" /></colors></fill></color><color name="heading_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="outline"><group_colors><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xC6C6C6" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xF9F9F9" alpha="100" stop="0" /></colors></fill></color><color name="divc"><fill type="linear" rotation="90"><colors><color rgb="0xE1E1E1" alpha="100" stop="0" /></colors></fill></color><color name="search_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color><color name="search_hover"><fill type="linear" rotation="90"><colors><color rgb="0x0000EE" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="resource"><group_colors><color name="separator"><fill type="linear" rotation="90"><colors><color rgb="0xE0E0E0" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="glossary"><group_colors><color name="selected_text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="selected"><fill type="linear" rotation="90"><colors><color rgb="0xC0E2F1" alpha="100" stop="0" /></colors></fill></color><color name="text"><fill type="linear" rotation="90"><colors><color rgb="0x353535" alpha="100" stop="0" /></colors></fill></color><color name="hover"><fill type="linear" rotation="90"><colors><color rgb="0xE6E6E6" alpha="100" stop="0" /></colors></fill></color><color name="diva"><fill type="linear" rotation="90"><colors><color rgb="0xE2E2E2" alpha="100" stop="0" /></colors></fill></color><color name="divb"><fill type="linear" rotation="90"><colors><color rgb="0xE2E2E2" alpha="100" stop="0" /></colors></fill></color><color name="divc"><fill type="linear" rotation="90"><colors><color rgb="0xFAFAFA" alpha="100" stop="0" /></colors></fill></color><color name="bg"><fill type="linear" rotation="90"><colors><color rgb="0xE7E7E7" alpha="100" stop="0" /></colors></fill></color><color name="heading_text"><fill type="linear" rotation="90"><colors><color rgb="0x444444" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group><color_group name="volume"><group_colors><color name="thumb_border"><fill type="linear" rotation="90"><colors><color rgb="0xA5A5A5" alpha="100" stop="0" /></colors></fill></color><color name="thumb_inner"><fill type="linear" rotation="90"><colors><color rgb="0xD4D4D4" alpha="100" stop="0" /></colors></fill></color><color name="thumb_bg"><fill type="linear" rotation="90"><colors><color rgb="0xC8C8C8" alpha="100" stop="0" /></colors></fill></color><color name="slider_border"><fill type="linear" rotation="90"><colors><color rgb="0xF2F2F2" alpha="100" stop="0" /></colors></fill></color><color name="slider_bg"><fill type="linear" rotation="90"><colors><color rgb="0xBCBCBC" alpha="100" stop="0" /><color rgb="0xBCBCBC" alpha="100" stop="128" /><color rgb="0xC3C3C3" alpha="100" stop="255" /></colors></fill></color></group_colors></color_group><color_group name="HTML"><group_colors><color name="htmlpage_bg_color"><fill type="linear" rotation="90"><colors><color rgb="0xFFFFFF" alpha="100" stop="0" /></colors></fill></color></group_colors></color_group></colorscheme></colorschemes><string_tables><string_table name="pxnsnfns11111101110"><string id="prev">PREV</string><string id="next">NEXT</string><string id="submit">SUBMIT</string><string id="outline">Menu</string><string id="resources">Resources</string><string id="glossary">Glossary</string><string id="transcript">Notes</string><string id="clear">Clear and return to Menu</string><string id="search_results">Search Results</string><string id="filter">Filter</string><string id="slide_text_chk">Slide Text</string><string id="transcript_chk">Notes</string><string id="search_in">Search in:</string><string id="check_include">Check to include</string><string id="search">Search...</string><string id="terms">Terms</string><string id="definition">Definition</string><string id="finish">FINISH</string><string id="acc_finish">finish</string><string id="acc_definition">definition</string><string id="acc_resources">resources</string><string id="acc_search_input">search</string><string id="acc_pause">pause</string><string id="acc_play">play</string><string id="acc_replay">replay</string><string id="acc_submit">submit</string><string id="acc_next">next</string><string id="acc_previous">previous</string><string id="acc_volume">volume</string><string id="submitall">SUBMIT ALL</string><string id="acc_submitall">submit all</string><string id="question_list">Question List</string><string id="more_info">More info</string><string id="send_an_email">Send an email</string><string id="close">Close</string><string id="bio">Bio</string><string id="exit">Exit</string></string_table></string_tables><sounds enabled="false" /><nav_data><outline><links><slidelink slideid="4DyOSe8c7uz.6TaBVbuxAMf" displaytext="Software Design Flow for ARM-based System on Chip" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5lqsaeXAhBi" displaytext="Introduction to SoCEDS" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.6MIAmKwUyO7" displaytext="SoC System Architecture" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5wZyy05rmIU" displaytext="ARM Hard Processor System(HPS) Summary" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5s8HoP49rro" displaytext="SoC Embedded Development Suite Overview" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6DoTN64OpET" displaytext="SoC EDS Contents" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6aQhHLzeW5i" displaytext="ARM DS-5 Altera Edition" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5wF3KS1crFU" displaytext="Coordinated Multi-Channel Delivery" expand="false" type="slide" /></links></slidelink><slidelink slideid="4DyOSe8c7uz.5joTuYaijq4" displaytext="Software Development and Boot Flows" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.6C86s9R48dV" displaytext="System Development Flow" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5tDEqR8sB1V" displaytext="Software Initial Board Bring-Up Flow" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6pxFU89bcuS" displaytext="Bare-metal Application Flow" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5h6fpMsxEYQ" displaytext="Software Application Development Flow" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6IAGYqDz1TD" displaytext="Hardware/Software Design Flow Overview" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5zK9QRhs9Kz" displaytext="HPS Typical Boot Stages" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6AnzPMo6mKB" displaytext="Second Stage Bootloader Generation" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5UyZJBYWme3" displaytext="Post-SSBL Software" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6VBhgAkylPq" displaytext="Creating System Header File" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6UpLCKdYL04" displaytext="ARM DS-5 Debug" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6IHwm2Cfdpg" displaytext="Boot Image and Flow" expand="false" type="slide" /></links></slidelink><slidelink slideid="4DyOSe8c7uz.6T4gAnerTt0" displaytext="Bare-metal Programming and HWLibs" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.604sUFb6TOY" displaytext="What is ‘Bare-metal’ Programming" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.670EnIxUMCm" displaytext="Bare-metal Compilers Provided" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.63GQAMdtO3c" displaytext="Hardware Libraries (HWLibs)" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6PVR2HIZcZM" displaytext="Hardware Libraries Documentation" expand="false" type="slide" /></links></slidelink><slidelink slideid="4DyOSe8c7uz.5w3quLsRbjR" displaytext="OS Support" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.6R0gJXGC9dS" displaytext="Embedded OS Availability" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5VdKeKgP06P" displaytext="Linux for Altera SoCs" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6RuKrW9Wa7K" displaytext="RocketBoards.org" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6nSVnHAN5nH" displaytext="Device Tree Generator Overview" expand="false" type="slide" /></links></slidelink><slidelink slideid="4DyOSe8c7uz.5Y8u4FGgOiK" displaytext="Debug" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.5gwTuiSMEdo" displaytext="FPGA-Adaptive Debugging" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6ItmuBOEaPI" displaytext="Debug Perspective – Registers View" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.672Fiuse6tT" displaytext="FPGA/HPS Cross Trigger with SignalTap Logic Analyzer" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5roxtQOAWRE" displaytext="Viewing Non-Intrusive Events" expand="false" type="slide" /></links></slidelink><slidelink slideid="4DyOSe8c7uz.6bTAOc7Ks1Z" displaytext="Conclusion" expand="false" type="slide"><links><slidelink slideid="4DyOSe8c7uz.6UPKQohbM7k" displaytext="SoC Development Boards" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6ImCp3DMKQz" displaytext="Follow-on Training" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.5bfb1EvtuIv" displaytext="Give us your feedback" expand="false" type="slide" /><slidelink slideid="4DyOSe8c7uz.6DDiw1cTDDi" displaytext="Thank You" expand="false" type="slide" /></links></slidelink></links></outline><search><slidetext slideid="4DyOSe8c7uz.6TaBVbuxAMf" slidebank="false" type="slide"> software design flow for arm-based system on chip</slidetext><slidetext slideid="4DyOSe8c7uz.5lqsaeXAhBi" slidebank="false" type="slide"> agenda 2 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.6MIAmKwUyO7" slidebank="false" type="slide"> soc system architecture 3 processordual-core arm® cortex™-a9 mpcore™ processorneon™ coprocessor double-precision fpu512-kb shared l2 cachearmv7-afpga features8 input adaptive logic modules (alm)variable precision dsp blockshard floating-point on arria® 10 socsm10k/m20k + mlab memory blocksfpllshard ip for pci express®high-bandwidth on-chip interfaces  pcie multiport ddr sdram controller multiport ddr sdram controller hard processor system (hps) arm cortex-a9neon / fpul1 cache l2 cache usb otg      (x2) 64-kbram dma(8 channels)              fpga shared multiport ddr sdram controller  jtag debug / trace (1)  arm cortex-a9neon / fpul1 cache sd / sdio/ mmc  i2c(x4) can(x2) gpio spi(x2) hard pcie® timers(x6) hps tofpga fpgato hps   fpgaconfig   uart(x2) ethernet(x2) qspi flash control  nandflash  hard multiport ddr sdram controller (2)   3-, 5-, 6-, &#xB;and 10-gbps transceivers   28lp process 8-input alms variable-precision dsp m10k memory and 640-bit mlabs fplls hps  i/os fpga general purpose  i/os   </slidetext><slidetext slideid="4DyOSe8c7uz.5wZyy05rmIU" slidebank="false" type="slide"> arm hard processor system(hps) summary 4 looks like an arm processor systemworks like an arm processor systemtypical arm processor development flowtypical arm processor development toolsarm compiler/debugger, jtag tools, program trace...</slidetext><slidetext slideid="4DyOSe8c7uz.5s8HoP49rro" slidebank="false" type="slide"> soc embedded development suite overview 5 contains everything you need for firmware and application development on the altera® soc hardware platformboard bring-upbare-metal application development and debuggingdevice driver developmentlinux based application development and debuggingdebug systems running symmetrical multiprocessing (smp)debug software targeting soft ip that resides in the fpga fabric</slidetext><slidetext slideid="4DyOSe8c7uz.6DoTN64OpET" slidebank="false" type="slide"> soc eds contents 6 arm ds-5 licenses available at http://ds.arm.com/altera component key feature arm license required arm development studio 5 (ds-5)altera edition toolkit eclipse ide  arm development studio 5 (ds-5)altera edition toolkit debugging over ethernet (linux)  arm development studio 5 (ds-5)altera edition toolkit debugging over usb-blaster ii (jtag) x arm development studio 5 (ds-5)altera edition toolkit automatic register views x arm development studio 5 (ds-5)altera edition toolkit hardware cross-triggering x arm development studio 5 (ds-5)altera edition toolkit cpu/fpga event correlation x hardware/software interface tools second stage bootloader  generator  hardware/software interface tools device tree generator  compiler tools linaro linux gcc tool chain (arm-linux-gnueabihf-)  compiler tools armcc 5 x compiler tools mentor codebench lite bare-metal gcc tool chain (arm-altera-eabi-)  soc hardware libraries hwlibs  soc programming examples golden hardware reference design, variety of software and linux examples  component key feature arm license required arm development studio 5 (ds-5)altera edition toolkit eclipse ide  arm development studio 5 (ds-5)altera edition toolkit debugging over ethernet (linux)  arm development studio 5 (ds-5)altera edition toolkit debugging over usb-blaster ii (jtag) x arm development studio 5 (ds-5)altera edition toolkit automatic register views x arm development studio 5 (ds-5)altera edition toolkit hardware cross-triggering x arm development studio 5 (ds-5)altera edition toolkit cpu/fpga event correlation x hardware/software interface tools second stage bootloader  generator  hardware/software interface tools device tree generator  compiler tools linaro linux gcc tool chain (arm-linux-gnueabihf-)  compiler tools armcc 5 x compiler tools mentor codebench lite bare-metal gcc tool chain (arm-altera-eabi-)  soc hardware libraries hwlibs  soc programming examples golden hardware reference design, variety of software and linux examples </slidetext><slidetext slideid="4DyOSe8c7uz.6aQhHLzeW5i" slidebank="false" type="slide"> arm ds-5 altera edition 7 file editingproject managementdebuggingrun configurationcontrolvariables/watch viewhps register view tracingcross-triggeringprofilingfpga soft ip register view </slidetext><slidetext slideid="4DyOSe8c7uz.5wF3KS1crFU" slidebank="false" type="slide"> coordinated multi-channel delivery 8 recommended source for everything linux altera.comquartus sw programmer signaltap la altera.comkernelu-bootyoctominimal rfstool chainshandoff toolshw librariesexamplesdocumentation rocketboards.orgkernel sourceu-boot sourceyocto sourcerfs sourcetoolchain sourcepublic gitwikimailman partnersbspsmiddleware3rd party toolslinks to partners available on the altera soc web page           </slidetext><slidetext slideid="4DyOSe8c7uz.5joTuYaijq4" slidebank="false" type="slide"> agenda 9 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.6C86s9R48dV" slidebank="false" type="slide">     system development flow fpga design flow software design flow hardwaredevelopment softwaredevelopment release release  quartus programmer in-system update  flash programmer release release  quartus programmer in-system update  flash programmer  simulate ,modelsim®, vcs, etc. axi™ and avalon ® bus&#xB;  functional models (bfms)   debug debug  signaltap ™ii logic analyzer system console  gnu, lauterbach, ds-5&#xB;  and arm® ecosystem    quartus design software qsys system integration tool standard rtl flow altera® and partner ip  arm development studio 5 gnu toolchain os/bsp: linux, vxworks hardware libraries design examples design design   hw/sw handoff    simulate  virtual platforms  </slidetext><slidetext slideid="4DyOSe8c7uz.5tDEqR8sB1V" slidebank="false" type="slide">   software initial board bring-up flow	 11 start embedded command shell  create second stage bootloader  hw/sw handoff files   import project from makefile  build/debug   .svdsymbol file modify if necessary command line arm ds-5  open arm ds-5 altera edition </slidetext><slidetext slideid="4DyOSe8c7uz.6pxFU89bcuS" slidebank="false" type="slide">   bare-metal application flow	 12 start embedded command shell  create second stage bootloader  hw/sw handoff files  import makefile build/debug   develop bare-metal application makefile command line arm ds-5  open arm ds-5 altera edition  .svdsymbol file create bare-metal application   </slidetext><slidetext slideid="4DyOSe8c7uz.5h6fpMsxEYQ" slidebank="false" type="slide">    software application development flow	 13 start embedded command shell  create second stage bootloader  hw/sw handoff files  go to community portal clone git trees(linux, u-boot, etc)  develop application makefile   build image for flash  open arm ds-5 altera edition import project from makefile build/debug      go to 3rd party website download bsp   command line arm ds-5 customize  create user bootloader    if os supported by ds-5</slidetext><slidetext slideid="4DyOSe8c7uz.6IAGYqDz1TD" slidebank="false" type="slide"> hardware/software design flow overview 14 software flow soc_system.h hardware flow .sopcinfo .svd handoff    devicetreegenerator ds-5 debugger second stage bootloader generator second stage bootloader      hw design  .sof  altera prime design software device tree .sopcinfo .svd handoff    devicetreegenerator ds-5 debugger second stage bootloader generator second stage bootloader      hw design  .sof  altera prime design software device tree   system header file generation   </slidetext><slidetext slideid="4DyOSe8c7uz.5zK9QRhs9Kz" slidebank="false" type="slide"> 15 hps typical boot stages  reset  boot rom  setup minimal configurationload 2ndary bootloader from flash into on-chip memory (skipped if booting from fpga)jumps to 2nd stage bootloader 2nd stage bootloader  setup iocsrs and pin muxingsetup clocks and pllsinitializes and calibrates sdramloads subsequent boot stage or os from flash into sdramjumps to subsequent stageprogram fpga  bootloader application specific os loader, if not included as part of second stage bootloader os   linux, vxworks, windows, ose, etc device drivers and bsp root file system application  ide and application debug possible fpga configuration from hps starts running code at reset exception addressbootrom is mapped to reset address</slidetext><slidetext slideid="4DyOSe8c7uz.6AnzPMo6mKB" slidebank="false" type="slide"> second stage bootloader generation 16 ssblpreloader for 28nm socsbootloader for 20nm socsssbl generation tool bsp-editor guicommand line executablestakes quartus handoff filestakes user configurationsgenerates ssbl sourcegenerates makefilerun makefile to compile ssbl </slidetext><slidetext slideid="4DyOSe8c7uz.5UyZJBYWme3" slidebank="false" type="slide"> post-ssbl software 17 next stage boot image could be:u-boot imageif not part of ssblbare-metal applicationosssbl verifies the header appended to the next stage softwaretarget os and architecturechecksumload addressetc…append header with the mkimage toolpart of socedsalso applied to fpga image if u-boot is used to load it  boot rom ssbl   </slidetext><slidetext slideid="4DyOSe8c7uz.6VBhgAkylPq" slidebank="false" type="slide"> creating system header file 18 create system header file from qsys .sopcinfo fileabstract away fpga component properties from softwarerun sopc-create-header-files from embedded command shellexecutable part of the quartus software installoutputs various .h filesfor the systemfor the processorsfor each of the masters in the system sopc-create-header-files &lt;qsys system&gt;.sopcinfo </slidetext><slidetext slideid="4DyOSe8c7uz.6UpLCKdYL04" slidebank="false" type="slide"> 19 arm ds-5 debug    change between development and debug perspectives </slidetext><slidetext slideid="4DyOSe8c7uz.6IHwm2Cfdpg" slidebank="false" type="slide"> 20 boot image and flow  </slidetext><slidetext slideid="4DyOSe8c7uz.6T4gAnerTt0" slidebank="false" type="slide"> agenda 21 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.604sUFb6TOY" slidebank="false" type="slide"> what is ‘bare-metal’ programming 22 bare-metal: the actual register interfaces and hardware features of the processor system bare-metal programming: code that reads and writes direct to the hardware with no intervening software functions/code/abstraction layerusage scenariosboard bring-up / test / verificationcustom bootable application or bootloader developmentsingle processor application development in-house os development fpga-based-peripheral management</slidetext><slidetext slideid="4DyOSe8c7uz.670EnIxUMCm" slidebank="false" type="slide"> bare-metal compilers provided 23 mentor graphics® codebench lite bare-metal compiler is included with the socedsgcc eabi compiler (arm-altera-eabi)referred to as altera baremetal gcc in ds-5&lt;eds install dir&gt;\host_tools\mentor\gnu\arm\baremetal\arm compiler 5armcc&lt;eds install dir&gt;\ds-5\sw\installed with ds-5all compilers can be invoked in ds-5 through project settings or makefilecreate, manage, and build projects </slidetext><slidetext slideid="4DyOSe8c7uz.63GQAMdtO3c" slidebank="false" type="slide"> hardware libraries (hwlibs) 24 abstraction of all system registerscan be used by bare metal applications,  os drivers or os kernelscontains tested functions for base system operations &#xB;(e.g. changing: clock speed, cache settings, fpga config.  etc.)provides developer protection and diagnosticsdivided into two layerssoc abstraction layermacros to access registers and address spacehardware managerfunctions to perform specific tasks operating         system    soc application hal bmal pal bsp bare-metal app hardware libraries        operating         system    soc application hal bmal pal bsp bare-metal app hardware libraries</slidetext><slidetext slideid="4DyOSe8c7uz.6PVR2HIZcZM" slidebank="false" type="slide"> hardware libraries documentation 25 html based documentation&lt;soc eds installation&gt;/ip/altera/hps/altera_hps/docauto-generated help </slidetext><slidetext slideid="4DyOSe8c7uz.5w3quLsRbjR" slidebank="false" type="slide"> agenda 26 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.6R0gJXGC9dS" slidebank="false" type="slide"> embedded os availability 27 vendor os/rtos development tools available from open source linux linaro compiler rocketboards.org  vxworks workbench wind river  µc/os-ii, µc/os-iii gnu compiler micriµm  ose optima enea  threadx gnu compiler express logic  wind river linux workbench/gnu wind river  qnx neutrino rtos momentics qnx  android gnu compiler fujisoft  integrity rtos multi/green hills green hills  windows embedded 7 microsoft/studio adeneo embedded  abassi armcc/gcc code time  nucleus gcc mentor  ecospro gcc ecoscentric vendor os/rtos development tools available from open source linux linaro compiler rocketboards.org  vxworks workbench wind river  µc/os-ii, µc/os-iii gnu compiler micriµm  ose optima enea  threadx gnu compiler express logic  wind river linux workbench/gnu wind river  qnx neutrino rtos momentics qnx  android gnu compiler fujisoft  integrity rtos multi/green hills green hills  windows embedded 7 microsoft/studio adeneo embedded  abassi armcc/gcc code time  nucleus gcc mentor  ecospro gcc ecoscentric           altera soc ecosystem: https://www.altera.com/products/soc/ecosystem.html   </slidetext><slidetext slideid="4DyOSe8c7uz.5VdKeKgP06P" slidebank="false" type="slide"> linux for altera socs 28 angstrom distributionlinux distro for embedded systemsyocto project configuration, package manager (opkg)recommended optionyocto project supportsocfpga layer (meta-altera) upstreamed to angstromused by angstromlatest stable kernelslong term support initiative kernelltsi kernel with real timeall branches are kept in-syncbug fixesnew featuresno changes of api in the ltsi branches   </slidetext><slidetext slideid="4DyOSe8c7uz.6RuKrW9Wa7K" slidebank="false" type="slide"> rocketboards.org 29 information foreverything linuxangstrom distributionyocto projectgitboardsreference designssecond stage bootloaderu-bootfpga programmingbootingdevice wide ampforumtraininglatest news…and much more </slidetext><slidetext slideid="4DyOSe8c7uz.6nSVnHAN5nH" slidebank="false" type="slide"> device tree generator overview 30 automatically create device tree for fpga peripherals to be consumed by linux kernelspart of soc edsopen source java program   sopcinfo file device tree blob options board xml files (optional) device tree generator      linux kernel</slidetext><slidetext slideid="4DyOSe8c7uz.5Y8u4FGgOiK" slidebank="false" type="slide"> agenda 31 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.5gwTuiSMEdo" slidebank="false" type="slide"> fpga-adaptive debugging 32 synchronization of debug actions on the hps with fpga activity including signaltap ii triggersuses arm coresight™ compatible ip in the hpsfeatures providedability to debug hps execution with usb-blaster™ cable view / change hps and fpga status and control registers from the arm ds5 debuggerfpga to hps cross triggerhardware signal or signaltap ii logic analyzer trigger out, breaks hps executionhps to fpga cross triggerbreaking code execution in the hps cores acts as an input trigger for the signaltap ii logic analyzer or other hw signalcorrelating hardware events with the hps trace stream without breaking processor execution</slidetext><slidetext slideid="4DyOSe8c7uz.6ItmuBOEaPI" slidebank="false" type="slide"> debug perspective – registers view 33  </slidetext><slidetext slideid="4DyOSe8c7uz.672Fiuse6tT" slidebank="false" type="slide"> fpga/hps cross trigger with signaltap logic analyzer 34 run signaltap ii logic analyzer and ds-5 debuggerhps -&gt; fpga cross triggerfpga -&gt; hps cross trigger        </slidetext><slidetext slideid="4DyOSe8c7uz.5roxtQOAWRE" slidebank="false" type="slide">  viewing non-intrusive events 35 view captured events with timestampcorrelate with program traceselect synchronize timestamps then program trace and source code will highlight the position of the code when the event happened. event data = event id + 4  timestamp  fpga generated events      right-click on line item</slidetext><slidetext slideid="4DyOSe8c7uz.6bTAOc7Ks1Z" slidebank="false" type="slide"> agenda 36 introduction to soc edssoftware development and boot flowbare-metal programming and hardware librariesos supportdebugging the socconclusion</slidetext><slidetext slideid="4DyOSe8c7uz.6UPKQohbM7k" slidebank="false" type="slide"> soc development boards 37 cyclone v socarria v socarria 10 socde0-nano-soc kitatlas-soc kitde1-soc education boardarrow sockitmacnica helio boardebv socratesand many others       </slidetext><slidetext slideid="4DyOSe8c7uz.6ImCp3DMKQz" slidebank="false" type="slide"> follow-on training 38 altera instructor led trainingsdesigning with an arm based socdeveloping software for an arm-based socaltera online trainingsintroduction to qsyssoc hardware overviewthe microprocessor unitinterconnect and memorysystem management, debug and gp peripheralsflash controllers and interface protocolssoc hardware design flowin-depth trainings available from our partnersarm, doulos, etc</slidetext><slidetext slideid="4DyOSe8c7uz.5bfb1EvtuIv" slidebank="false" type="slide"> give us your feedback 39 when you registered for this training you received a confirmation emailplease click on the link in the email to complete a short surveyyour feedback is important to help us improve future trainings!</slidetext><slidetext slideid="4DyOSe8c7uz.6DDiw1cTDDi" slidebank="false" type="slide"> thank you</slidetext></search></nav_data><resource_data description="&lt;p align='left'&gt;&lt;font face='Articulate' size='11' color='#444444'&gt;Here are some useful links and documents:&lt;/font&gt;&lt;/p&gt;" /><transcript_data><slidetranscripts><slidetranscript slideid="4DyOSe8c7uz.6TaBVbuxAMf" slidebank="false" type="slide" noteswf="presentation_content/notes/6TaBVbuxAMf.swf" notespng="mobile/notes/6TaBVbuxAMf.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Hello and welcome to altera’s software design flow for arm based system on chip online training.  Today we’ll take a look at the overview of what it takes to create software for the ARM Processors on the SoC devices including software that communicates with the FPGA side of the SoC.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5lqsaeXAhBi" slidebank="false" type="slide" noteswf="presentation_content/notes/5lqsaeXAhBi.swf" notespng="mobile/notes/5lqsaeXAhBi.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here are the topics we’ll be discussing. We start by introducing you to Altera’s SoC Embedded Development Suite of software tools then we’ll look at the software and boot flow. Examine the creation Baremetal programming. OS Support and finally Debugging capability of the SoC.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6MIAmKwUyO7" slidebank="false" type="slide" noteswf="presentation_content/notes/6MIAmKwUyO7.swf" notespng="mobile/notes/6MIAmKwUyO7.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Before examining the SoC Software lets look at the SoC System Architecture.&lt;br&gt;The SoC contains a dual core ARM cortex A9 processor subsystem with separate L1 caches, a NEON SIMD coprocessor with a double precision FPU, a shared L2 cache and a plethera of peripherals that one would expect around an application class processor such as the cortex A9.  These include multiple Flash controllers, ethernet MACs, serial interfaces such as USB, CAN, I2C and SPI, timers and a dedicated multi port front end memory controller to SDRAM.&lt;br&gt;&lt;br&gt;In addition to this high performance processor, there is the FPGA fabric,which provide additional resources such as variable precision DSP blocks, fractional PLLs,  embedded memory, multiple transcievers, PCIe HIP, and more memory controllers, to help you develop a custom application for your needs. &lt;br&gt;&lt;br&gt;There are also high speed bridges between the FPGA and HPS portions of the SoC, several configurable ports that allow FPGA masters to access HPS memory directly and with high bandwidth and low latency, and a lightweight bridge for command and status register access from the HPS. &lt;br&gt;&lt;br&gt;All of this is on the same die and is designed to work together to create a custom system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5wZyy05rmIU" slidebank="false" type="slide" noteswf="presentation_content/notes/5wZyy05rmIU.swf" notespng="mobile/notes/5wZyy05rmIU.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The philosophy for Altera’s software tools is simple in that the tools should already be very familiar to current ARM software and firmware engineers. Because we are leveraging industry standard tools and flow.&lt;br&gt;&lt;br&gt;We did introduce some innovative features that’s specifically aimed at advancing the capability of an FPGA based ARM system and we’ll discuss these. These include HW SW handoff capabilities and FPGA adaptive debugging.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5s8HoP49rro" slidebank="false" type="slide" noteswf="presentation_content/notes/5s8HoP49rro.swf" notespng="mobile/notes/5s8HoP49rro.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;To get you started quickly with software development. Altera provides the SoC Embedded Development Suite. This tool contains everything you need for firmware and application development on an Altera SoC HW platform.&lt;br&gt;&lt;br&gt;You will be able to performboard bringup, baremetal application development and debug, creating device drivers, performing Linux application development and debugging, debugging systems running symmetrical multiprocessing between the two ARM cores. , or debug your software that is controlling the soft IP that resides in the FPGA.&lt;br&gt;&lt;br&gt;Included in the suite are all tools some reference designs meant to get you started very quickly.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6DoTN64OpET" slidebank="false" type="slide" noteswf="presentation_content/notes/6DoTN64OpET.swf" notespng="mobile/notes/6DoTN64OpET.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here you can see all the features of the SoC EDS Altera provides.  There are 2 license options mainly relating to the capabilities of ARM’s DS-5 tools included.&lt;br&gt;&lt;br&gt;THe SoCEDS included HW SW handoff including the Second Stage Bootloader generator tool and the device tree generator tool.&lt;br&gt;For baremetal software compilation, we ship with the ARMCC 5 and GCC tool chain from Mentor. ARMCC will require the ARM license.&lt;br&gt;Hardware libraries, which is an abstraction layer of software provided by Altera,  are always included to facilitate your development of bare metal projects. And HW and SW reference designs and examples are provided.&lt;br&gt;&lt;br&gt;Without an ARM license, you will still be able to use the ARM Development Studio tools but capabilities will be limited to Linux Application debug across ethernet.&lt;br&gt;&lt;br&gt;To perform low level debug across JTAG you’ll need to acquire a license from ARM to activate features such as debugging over JTAG using ALtera’s USB-Blaster or other tools, you’ll also get the capability to automatically see FPGA register view inside the softare tool. You’ll be able to perform CPU/FPGA cross-triggering in either direction as well as CPU/FPGA HW event correlation.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6aQhHLzeW5i" slidebank="false" type="slide" noteswf="presentation_content/notes/6aQhHLzeW5i.swf" notespng="mobile/notes/6aQhHLzeW5i.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The main debugging tool in the SoCEDS is the ARM DS-5 Altera Edition toolkit.  This is a graphical tool built on the Eclipse platform, that lets you manage and build projects with an easy-to-use graphical interface.  We’ll talk about the flow itself later, but within this tool you can edit files, create files and manage your project, but the real power and usefulness to this tool is in its debugging features.  &lt;br&gt;&lt;br&gt;There are a lots of capabilities this tool has to allow you to run, stop and step through your code.  There are lots of windows that can be used to look at variables, functions, set break points or watchpoints, and then there are more advanced features that allow you to look at the registers in the HPS as well as the custom IP that you have created in your FPGA.  Through this simple graphic window, you can easily read or write each individual register&lt;br&gt;&lt;br&gt;You can also trace through your code, set up and cross trigger between both the FPGA domain and the HPS component.  You can also profile your code.&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5wF3KS1crFU" slidebank="false" type="slide" noteswf="presentation_content/notes/5wF3KS1crFU.swf" notespng="mobile/notes/5wF3KS1crFU.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Not everything is included in the SoCEDS and here we examine all of the delivery mechanism required to create a successful SoC System Solution.&lt;br&gt;&lt;br&gt;For hardware development of the FPGA portion of the SoC, you’ll need to download the Quartus Prime design software which includes all of the traditional HW design and debugging capabilities.&lt;br&gt;&lt;br&gt;The SoCEDS from altera.com include software development tools along with a mile stone release of the linux kernel and u-boot, the DS5 and other features that we’ve talked about in the previous two slides.&lt;br&gt;&lt;br&gt;For the latest linux related information and git tree please visit rocketboards.org. This is the community portal where we expect customers to find everything regarding Linux including sources, wiki, board information, training, forums, mailing list, wiki and much much more. This is always kept up to date by ALtera and the community.&lt;br&gt;&lt;br&gt;Finally if you’re considering using a third party OS from other vendors such as VxWorks, ThreadX, Commercial Linux, or any of the over 20 OSes that support Altera’s SoC. Just contact the appropriate vendor. THere’s a link to all of our partners on Altera’s SoC web page.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5joTuYaijq4" slidebank="false" type="slide" noteswf="presentation_content/notes/5joTuYaijq4.swf" notespng="mobile/notes/5joTuYaijq4.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we’ve see an introduction to the contents of the SoC EDS, let’s examine the development and boot flows.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6C86s9R48dV" slidebank="false" type="slide" noteswf="presentation_content/notes/6C86s9R48dV.swf" notespng="mobile/notes/6C86s9R48dV.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Here's the Overall System development flow, since this is the software development flow training we'll focus on the features in the right column, but Altera does provide tools necessary to carry out FPGA development and debug but that's discuss in a separate online training. On the software side, we start with the handoff files created by Quartus and Qsys, these are files that describe hardware configuration setting chosen by the HW engineer. With the handoffs we can create the second stage bootloader, linux device tree, and other debug files. In the software side you can design using the  ARM DS-5 tool and other tool chains. If hardware is not available you may simulate your software using virtual platform. Altera leverages Mentor’s Vista virtual platforms for our SoC products so visit Altera’s or Mentor’s website for more information. For debugging you may use DS-5 or other supported tools and lastly you’ll be able to burn the software onto flash for release.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5tDEqR8sB1V" slidebank="false" type="slide" noteswf="presentation_content/notes/5tDEqR8sB1V.swf" notespng="mobile/notes/5tDEqR8sB1V.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;NOw let’s discuss several usage and debug scenarios when using the DS-5.&lt;br&gt;&lt;br&gt;If you’re performing initial board bring-up,  you can follow the flow here.&lt;br&gt;&lt;br&gt;First open up DS-5 from the embedded command shell that’s part of the SoCEDS.  Then using the hardware software handoff files, run the second stage bootloader generator to create and then run make to compile the second stage bootloader. In DS-5 you can import in the SSBL project and run it on the board to debug. If you run DS-5 with the appropriate svd or system view description file you’ll see all the registers including FPGA ones in your DS5 debug environment.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6pxFU89bcuS" slidebank="false" type="slide" noteswf="presentation_content/notes/6pxFU89bcuS.swf" notespng="mobile/notes/6pxFU89bcuS.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This slide shows the bare-metal application execution flow.&lt;br&gt;&lt;br&gt;Like before, you’ll start DS5 from the embedded command shell and create the SSBL.&lt;br&gt;In addition, this time you can also create the baremetal application.&lt;br&gt;In DS5 you can create the baremetal application project. Prior to excuting the baremetal application, you’ll likely need to set the run configuration to run the SSBL right before the baremetal application to setup the System Hardware.&lt;br&gt;Once the baremetal application project is built, you’ll be able to run and debug like any other software.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5h6fpMsxEYQ" slidebank="false" type="slide" noteswf="presentation_content/notes/5h6fpMsxEYQ.swf" notespng="mobile/notes/5h6fpMsxEYQ.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;For OS Development, again start DS5 from the embedded command shell and create the second stage bootloader.&lt;br&gt;&lt;br&gt;If you’re going to be running Linux, go to the community portal rocketboards.org, there you can clone git trees for the appropriate version of kernel you need customize if necessary and build Linux. THen develop your linux application and bring that into DS5. Once inside DS5 you’ll be able to develop and debug your code.&lt;br&gt;&lt;br&gt;For other 3rd party OS’s you’ll need to download a board support package from the 3rd parties website, such as Windriver after creating the SSBL. You’ll likely use that vendor’s tools for debugging and development but if your OS is supported by DS-5 you’ll also be able to use ARM DS-5.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6IAGYqDz1TD" slidebank="false" type="slide" noteswf="presentation_content/notes/6IAGYqDz1TD.swf" notespng="mobile/notes/6IAGYqDz1TD.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;In order to start these software flows, you will need certain files that are created by the hardware engineer during the FPGA generation process.  &lt;br&gt;The first set of files is used by the SSBL generator tool to create SSBL software used to setup hardware features such as Pins, Clocks, and SDRAM. This part is universal for all applications.&lt;br&gt;&lt;br&gt;The second file is the ARM CMSIS .svd file that are used by the ARM DS-5 as an symbol file giving you visibility  into the soft IP peripheral registers in FPGA .  The system SVD file is created by Qsys as an aggregate of all component SVD files. For custom components you’ll have to create individual SVD files, but Altera provided IP generally already support SVD.&lt;br&gt;&lt;br&gt;Lastly there’s the Qsys created .sopcinfo file.  This can be used by the Device Tree generator tool that allows device drivers to be added dynamically to a Linux Kernel.  This keeps the kernel small and allows for plug and play features of the FPGA IP.   The other use for this file is to produce the baremetal system header file which will automatically contain the address map, interrupt information, and features of the individual components.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5zK9QRhs9Kz" slidebank="false" type="slide" noteswf="presentation_content/notes/5zK9QRhs9Kz.swf" notespng="mobile/notes/5zK9QRhs9Kz.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now, let’s take a look at the Typical boot flow of the ARM Hard Processor System.&lt;br&gt;First the system will come out of reset.  At this point CPU 1 is held in reset and CPU 0 will jump to reset address, typically 0, and start executing code out of the BootROM which is mapped to this address.&lt;br&gt;&lt;br&gt;This bootROM is really the first stage of code that gets run.  This is a bootROM that is hardcoded by Altera.  It’s sole purpose is to setup the device so that it can fetch the next stage of boot code into onchip RAM, and pass control over to it.  &lt;br&gt;&lt;br&gt;That next piece of code that is loaded is the SSBL.  The purpose of the SSBL code is to set the SoC according to Hardware configuration options. The SSBL will configure the SDRAM and setup the basic clocking and IO pins such that the HPS now looks like a normal ARM processor.  If the SSBL is U-Boot as in 20nm families, it’ll go ahead and execute that as well.&lt;br&gt;&lt;br&gt;If the SSBL is just the preloader as in 28nm devices, it will then go fetch the next piece of code which is the User bootloader such as U-Boot.  At this point, after the preloader is run, you have a typical ARM boot flow. &lt;br&gt;&lt;br&gt;As the User Bootloader runs, it will Load the appropriate OS and there are many available with the appropriate device drivers, BSP, and Root File System.&lt;br&gt;&lt;br&gt;Finally the OS Application will be launched. There are many places where the HPS can load the FPGA configuration if necessary.. This is usually done in the Bootloader stage or the application stage.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6AnzPMo6mKB" slidebank="false" type="slide" noteswf="presentation_content/notes/6AnzPMo6mKB.swf" notespng="mobile/notes/6AnzPMo6mKB.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This slide talks about the automatic generation of the Second Stage Bootloader.&lt;br&gt;The SSBL is referred to as the Preloader for 28nm SoCs and just the bootloader for 20nm SoCs..&lt;br&gt;&lt;br&gt;To generate the SSBL from the handoff files, run the SSBL Generation Tool called bsp-editor. You see the GUI screen capture here but there is also an command line model. Using the tool you can specify user configurations and provide the handoff files and the tool will generate the SSBL source along with the makefile. THen all you need to do is run makefile to compile the SSBL into a image with the Altera BootROM compatible header.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5UyZJBYWme3" slidebank="false" type="slide" noteswf="presentation_content/notes/5UyZJBYWme3.swf" notespng="mobile/notes/5UyZJBYWme3.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The SSBL is universal for all types of application. But the subsequent stage is not. The Post SSBL Software can be U-Boot baremetal application or an OS&amp;gt;&lt;br&gt;&lt;br&gt;The SSBL will always verify the header of the next stage software for information such as Target OS, CHecksum, Load address, and others…&lt;br&gt;This means you’ll need to appened the appropriate SSBL compatible header. To do this you can use the open source mkimage tool which is also shipped as part of the SOCEDS.&lt;br&gt;If you’re using U-Boot to load the FPGA image, mkimage can be used for that as well.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6VBhgAkylPq" slidebank="false" type="slide" noteswf="presentation_content/notes/6VBhgAkylPq.swf" notespng="mobile/notes/6VBhgAkylPq.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Another thing that can facilitate development of baremetal applications is to use a automatic header file creation utility which includes information about the processor memory map and components.&lt;br&gt;&lt;br&gt;You can use this tool to abstract away FPGA components from the software.&lt;br&gt;&lt;br&gt;To create the soc system header file run the sopc-create-header-files executable in the embedded command shell on the Qsys generated sopcinfo file.&lt;br&gt;&lt;br&gt;Once this tools is run, it will create various header files for the system, the processor, and for each of the masters in the HPS.&lt;br&gt;&lt;br&gt;You can then include the created header file in your baremetal application and use the MACROs defined inside the header to abstract away component properties.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6UpLCKdYL04" slidebank="false" type="slide" noteswf="presentation_content/notes/6UpLCKdYL04.swf" notespng="mobile/notes/6UpLCKdYL04.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;As we said earlier, DS-5 is a fully featured debugger for use with Linux Application Debugging, Kernel Debugging, Driver Debugging, or Baremetal Debugging. DS5 can recognize altera USB Blaster Cable as a debug cable for Cortex A9 processor debug. ONce the debug starts you’ll be able to perform all expected debugging tasks such as run control, break points, watch points, register view, trace, memory view, etc.. You can also enable semihosting which allows baremetal printf statements to pipe through JTAG to the debug console as shown in this screen capture.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6IHwm2Cfdpg" slidebank="false" type="slide" noteswf="presentation_content/notes/6IHwm2Cfdpg.swf" notespng="mobile/notes/6IHwm2Cfdpg.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This slide shows in summary all of the tasks needed to successfully create a bootable software image with all of the necessary software, we’re using linux as the example. THere are many places where the final software pieces are located but we’re going to assume everything is on a flash device.&lt;br&gt;&lt;br&gt;First you’ll use quartus prime to create the handoff files. THe handoff files then is used by the SSBL generator to create the SSBL software. THe hand off files can also be used by the device tree generator that’s part of the SoCEDS to create the Linux device tree.&lt;br&gt;&lt;br&gt;The User boot loader can be stored in any of the HPS flash devices and the actual OS can be located on a variety of peripherals on the HPS…Flash devices, over ethernet, on a remote PC via a UART, or a USB storage device.&lt;br&gt;Here in the diagram we leverage the yocto project to build the U-Boot Kernel and the File system to be place in Flash.&lt;br&gt;&lt;br&gt;Finally for linux application develop your source code, debug using ARM DS-5 altera edition and put the custom drivers and applications on the flash image as well.&lt;br&gt;&lt;br&gt;Remember, these flash devices can contain more than just the bare minimum to boot the HPS.  You can put up to 4 preloader images, U boot, your OS, the Device Tree Blob, the RFS, the FPGA bitstream and any application or files that you want or can fit in the device.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6T4gAnerTt0" slidebank="false" type="slide" noteswf="presentation_content/notes/6T4gAnerTt0.swf" notespng="mobile/notes/6T4gAnerTt0.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we understand the software flow. Let’s take a look in detail on how to develop bare-metal programming with ALtera SoCs including using the Altera provided Hardware Libraries.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.604sUFb6TOY" slidebank="false" type="slide" noteswf="presentation_content/notes/604sUFb6TOY.swf" notespng="mobile/notes/604sUFb6TOY.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Baremetal programming is simply low-level software developing interacting with the actual register interfaces of the hardware without much intervention of abstraction layers.  The less operating system resources you use the more baremetal you are.  &lt;br&gt;&lt;br&gt;You’ll need to have in-depth knowledge of the hardware to write this type of code which also that makes it less portable.&lt;br&gt;&lt;br&gt;However, there are many use scenarios for baremetal applications.&lt;br&gt;One of the main uses for Baremetal application isfor board bring up. Without the overhead of an OS you’ll be able to directly manipulate the FPGA peripherals. &lt;br&gt;You can also use baremetal methodology to customize your bootable application or do bootloader development, you can do simple single processor application development, in house OS development and driver  development, or FPGA based peripheral management.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.670EnIxUMCm" slidebank="false" type="slide" noteswf="presentation_content/notes/670EnIxUMCm.swf" notespng="mobile/notes/670EnIxUMCm.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The SoCEDS includes all tools necessary to perform baremetal development. And the EDS gives you 2 choices regarding the compiler. Although there are more on the open market.&lt;br&gt;&lt;br&gt;The mentor graphics code bench lite compiler is included this is a GCC Embedded Application Binary Interface Compiler that works with the Altera SOCs.&lt;br&gt;The ARM Pro Compiler armcc is also included. The altera edition of the SoCEDS includes a license to ARMCC.&lt;br&gt;&lt;br&gt;Both compilers can be invoked from DS-5 through project settings or makefile.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.63GQAMdtO3c" slidebank="false" type="slide" noteswf="presentation_content/notes/63GQAMdtO3c.swf" notespng="mobile/notes/63GQAMdtO3c.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;If you choose to develop baremetal application, we recommend you to use the Hardware Libraries included as part of the SoCEDS.  This was created to address the needs of low level SW programers to mitigate the complexities of the SoC.  Its an abstraction of all the registers in the system and can be used to develop baremetal applications, OS drivers or OS kernels.  &lt;br&gt;The hardware libraries not only makes baremetal programming easier it also provide the developer protection and diagnostics features.&lt;br&gt;&lt;br&gt;There are 2 components that make up the Hardware libraries:  The SoCAL, the SoC abstraction layer and the Hardware Manager.&lt;br&gt;&lt;br&gt;The SoCAL is a low level HAL.  With thousands of registers in the device, this is your method for figuring out what each register does.  The SoCAL is made up of header files that include MACROS which represent the registers and register values.&lt;br&gt;&lt;br&gt;At a higher level, there’s the Hardware Manager. THese are altera engineer written functions that perform particular tasks correctly and efficiently.  &lt;br&gt;&lt;br&gt;The hardware libraries are provided in source code format as part of the SoCEDS Download.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6PVR2HIZcZM" slidebank="false" type="slide" noteswf="presentation_content/notes/6PVR2HIZcZM.swf" notespng="mobile/notes/6PVR2HIZcZM.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The Hardware libraries covers many components in the Hard PRocessor System, the easiest way to get started with Hardware libraries is using the HTML based documentation that ships with the SoCEDS. Follow the link here to find the auto-generated help which is always kept in sync with the source code and is sorted by component. THis screen capture shows the function that will Configure the FPGA with a given configuration bitstream data.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5w3quLsRbjR" slidebank="false" type="slide" noteswf="presentation_content/notes/5w3quLsRbjR.swf" notespng="mobile/notes/5w3quLsRbjR.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now lets discuss OS Support for the altera SOCs.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6R0gJXGC9dS" slidebank="false" type="slide" noteswf="presentation_content/notes/6R0gJXGC9dS.swf" notespng="mobile/notes/6R0gJXGC9dS.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;There are over 20 major OSes that support Altera’s SoC products, here’s a snapshot of some of the more popular option. For a complete list of the SoC Ecosystem visit the ecosystem web page on altera.com.&lt;br&gt;&lt;br&gt;There are many options available to you for the embedded ARM processor beyond the Linux that we provide.  If you choose to the software from any of these vendors, they will provide you with the necessary BSP and support for you to successfully develop you system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5VdKeKgP06P" slidebank="false" type="slide" noteswf="presentation_content/notes/5VdKeKgP06P.swf" notespng="mobile/notes/5VdKeKgP06P.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;On the other hand if you choose to go with Open Source Linux.&lt;br&gt;We fully support many options regarding linux for Altera SoCs.&lt;br&gt;&lt;br&gt;First is Angstrom. Angstrom is a linux distribution for embedded systems. Having a distribution gives you the flexibility that the file system can be changed at run time. Angstrom distribution is also available with a package manager. Angstrom is the recommended option.&lt;br&gt;&lt;br&gt;There’s extensive yocto project support for Altera’s SoCs allowing you to create your own linux distribution,  altera maintains the meta-altera layer which is upstreamed.&lt;br&gt;&lt;br&gt;We always keep up with the latest stable kernels which gets updated approximately once every three month.&lt;br&gt;But if would like something more stable, we also offer the Long Term support initiative kernel or LTSI kernel as well as LTSI with the real time patch kernel.&lt;br&gt;&lt;br&gt;All branches are kept in-sync with bug fixes and new features but for LTSI branches there are no changes to APIs.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6RuKrW9Wa7K" slidebank="false" type="slide" noteswf="presentation_content/notes/6RuKrW9Wa7K.swf" notespng="mobile/notes/6RuKrW9Wa7K.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;For all your Linux needs, goto Rocketboards.org community portal.  From this portal is everything you need to get started with Linux development.  As we said earlier, you can link to the GIT tree, you can get help from the community and from Altera specialists, people post projects and reference designs, and there is information and links to Altera’s and our partners development boards. &lt;br&gt;A mailing list, forum, documentation, and training are all there on the portal ready to help you get your project started.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6nSVnHAN5nH" slidebank="false" type="slide" noteswf="presentation_content/notes/6nSVnHAN5nH.swf" notespng="mobile/notes/6nSVnHAN5nH.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Another thing I’d like to talk about here is the device tree generator. This is a tool we include in the SoCEDS that makes the development of Device Tree for FPGA peripheral easy. It is a open source java program that takes the sopc info file generated by the Qsys system integration tool and generates with certain user and board options to create the device tree source or compiled device tree blob for consumption by linux kernels. Taking advantage of automatically created device trees makes it easy for kernels to work with the ever changing FPGA hardware environment.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5Y8u4FGgOiK" slidebank="false" type="slide" noteswf="presentation_content/notes/5Y8u4FGgOiK.swf" notespng="mobile/notes/5Y8u4FGgOiK.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we’ve covered all the parts of software development, let’s take a look at the capabilities the SoCEDS provides to debug the SoC.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5gwTuiSMEdo" slidebank="false" type="slide" noteswf="presentation_content/notes/5gwTuiSMEdo.swf" notespng="mobile/notes/5gwTuiSMEdo.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The idea of FPGA adaptive debugging is allowing you to synchronize debug actions on the HPS with those on the FPGA side including the SignalTapII logic analyzer. This is done through the use of standard ARM provided coresight compatible IP in the HPS.&lt;br&gt;&lt;br&gt;Several features are provided.&lt;br&gt;First for software development, you can run, step, pause your code across a JTAG connection using Altera’s USB-Blaster cable from the ARM DS-5 tools.&lt;br&gt;With the previously discussed SVD files you’ll be able to change and view HPS and FPGA status and control registers directly debugger.&lt;br&gt;&lt;br&gt;You’ll be able to cross trigger from FPGA to HPS, meaning a hardware signal or signal tap ii logic analyzer trigger out and breaks HPS execution.&lt;br&gt;Or you can perform HPS to FPGA cross trigger where the breaking of code execution in the HPS through breakpoints for example will act as an input trigger for the Signal Tap II logic analyzer or other Hardware signal.&lt;br&gt;&lt;br&gt;Finally you can correlate hardware events with the HPS trace stream without breaking processor execution through events.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6ItmuBOEaPI" slidebank="false" type="slide" noteswf="presentation_content/notes/6ItmuBOEaPI.swf" notespng="mobile/notes/6ItmuBOEaPI.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;When debugging with DS5,  if the components in the FPGA fabric has an associated system view description file then you will be able to view and access those registers directly through the register view in the DS5 debugger making hardware debugging easy. With in the register view are also all of the components in the HPS along with the processor registers.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.672Fiuse6tT" slidebank="false" type="slide" noteswf="presentation_content/notes/672Fiuse6tT.swf" notespng="mobile/notes/672Fiuse6tT.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Cross triggering is the ability for Software Debugger to cause a hardware trigger or for hardware to stop the DS5 debugger.&lt;br&gt;&lt;br&gt;In this examine our hardware trigger is the Signal Tap II logic analyzer.&lt;br&gt;&lt;br&gt;To perform the HPS to FPGA crosstrigger, we first in Quartus set the SignalTap trigger in to be the HPS trigger out then compile the quartus project. Then once the Signal Tap II logic analyzer is running and the DS-5 debugger is running with cross trigger turned on. Every time DS5 encounters a breakpoint or any break in execution, it will cause a FPGA trigger which in this case is a signaltap trigger.&lt;br&gt;&lt;br&gt;On the other hand if we want to perform an FPGA to HPS crosstrigger. We would first set the SignalTap trigger out to be connected to the HPS trigger in. Compile the Quaruts project and then whenever the SignalTap triggers it will cause the DS5 debugger to stop.&lt;br&gt;&lt;br&gt;This is a great way to debug low levels and isolate the hardware or software issue.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5roxtQOAWRE" slidebank="false" type="slide" noteswf="presentation_content/notes/5roxtQOAWRE.swf" notespng="mobile/notes/5roxtQOAWRE.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;The last thing I would to discuss is nonintrusive hardware events. To use this features. First you’ll need to connect FPGA signals to the STM  input of the HPS.&lt;br&gt;&lt;br&gt;THen before running the debugger, setup the DS5 environment to accept trace and STM events.&lt;br&gt;Then as the software is executing if those STM events happen they will be inserted into the trace buffer along with the program trace.&lt;br&gt;The events window in the debugger will show the events along with the time stamp and event IDs once the execution has stopped.&lt;br&gt;You will be able to correlate the events stored with software position with either timestamp information or the synchronization feature in the DS-5 debugger.&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6bTAOc7Ks1Z" slidebank="false" type="slide" noteswf="presentation_content/notes/6bTAOc7Ks1Z.swf" notespng="mobile/notes/6bTAOc7Ks1Z.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;This concludes the main topics of the presentation. We’ve started talking about the features of the SoCEDS then moving to the steps in the software development and boot flows.&lt;br&gt;We then talked about baremetal programming as the provided hardware libraries.&lt;br&gt;After that we talked about OS Support including Linux and Rocketboards, and finally debug.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6UPKQohbM7k" slidebank="false" type="slide" noteswf="presentation_content/notes/6UPKQohbM7k.swf" notespng="mobile/notes/6UPKQohbM7k.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;Now that we understand the software development flow, the fastest way to get started developing software is with one of the development kits from altera or one of our partners. Listed here are some of the popular kits available. The cheapest board here is the Atlas-SoC kit which is under $100 and go in capability from there.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6ImCp3DMKQz" slidebank="false" type="slide" noteswf="presentation_content/notes/6ImCp3DMKQz.swf" notespng="mobile/notes/6ImCp3DMKQz.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;If you would like to learn more about our SoC products. You may attend the Designing with an Arm based Soc or developing software for an Arm based Soc instructor led trainings. Or we have several relevant online trainings on Qsys as well as SoC overview and SoC hardware design flow.&lt;br&gt;&lt;br&gt;Finally if you would like more detailed information on the Cortex A9 or the associated peripheral, please attend in-depth training from one of our partners such as Arm, Doulos.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.5bfb1EvtuIv" slidebank="false" type="slide" noteswf="presentation_content/notes/5bfb1EvtuIv.swf" notespng="mobile/notes/5bfb1EvtuIv.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;One more thing: when you registered for this on-line training, you should have received a link to a short survey where you can provide feedback.  We’d greatly appreciate it if you’d fill out that survey now.  We’re constantly updating and improving our training materials, and your feedback helps us create the materials that you want!  Thank you for your feedback.  &lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript><slidetranscript slideid="4DyOSe8c7uz.6DDiw1cTDDi" slidebank="false" type="slide" noteswf="presentation_content/notes/6DDiw1cTDDi.swf" notespng="mobile/notes/6DDiw1cTDDi.png">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='1' tabstops='[48, 96]' leftmargin='0' indent='0'&gt;&lt;font face='Microsoft Sans Serif' size='10.9933pt' color='#000000'&gt;I hope you found this training of the software development flow useful and helpful to get you started designing with the Altera SoC devices.&lt;br&gt;&lt;br&gt;Thank you and best of luck with all of your designs.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript></slidetranscripts></transcript_data><glossary_data /></bwFrame>